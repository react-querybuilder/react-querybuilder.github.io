"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3236],{41514:(e,n,t)=>{t.d(n,{L:()=>o});var a=t(67294);const o=e=>{let{option:n,disabled:t=!1,text:o}=e;return a.createElement("a",{href:"/demo#"+n+"="+!t},o||"Click here for demo"+(t?" with this feature disabled":""))}},90069:(e,n,t)=>{t.d(n,{ZP:()=>r});var a=t(83117),o=(t(67294),t(3905));const l={toc:[]};function r(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"../typescript"},"TypeScript")," page for information about the types and interfaces referenced below.")))}r.isMDXComponent=!0},50135:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var a=t(83117),o=(t(67294),t(3905)),l=t(41514),r=t(90069);const i={title:"<QueryBuilder />",description:"Props and other configuration for the main component"},p=void 0,d={unversionedId:"api/querybuilder",id:"api/querybuilder",title:"<QueryBuilder />",description:"Props and other configuration for the main component",source:"@site/docs/api/querybuilder.mdx",sourceDirName:"api",slug:"/api/querybuilder",permalink:"/docs/next/api/querybuilder",draft:!1,editUrl:"https://github.com/react-querybuilder/react-querybuilder/edit/main/website/docs/api/querybuilder.mdx",tags:[],version:"current",frontMatter:{title:"<QueryBuilder />",description:"Props and other configuration for the main component"},sidebar:"mySidebar",previous:{title:"API",permalink:"/docs/next/category/api"},next:{title:"<ValueEditor />",permalink:"/docs/next/api/valueeditor"}},s={},u=[{value:"Props",id:"props",level:2},{value:"<code>fields</code>",id:"fields",level:3},{value:"<code>onQueryChange</code>",id:"onquerychange",level:3},{value:"<code>query</code>",id:"query",level:3},{value:"<code>defaultQuery</code>",id:"defaultquery",level:3},{value:"<code>context</code>",id:"context",level:3},{value:"<code>operators</code>",id:"operators",level:3},{value:"<code>combinators</code>",id:"combinators",level:3},{value:"<code>controlElements</code>",id:"controlelements",level:3},{value:"<code>addGroupAction</code>",id:"addgroupaction",level:4},{value:"<code>cloneGroupAction</code>",id:"clonegroupaction",level:4},{value:"<code>removeGroupAction</code>",id:"removegroupaction",level:4},{value:"<code>lockGroupAction</code>",id:"lockgroupaction",level:4},{value:"<code>addRuleAction</code>",id:"addruleaction",level:4},{value:"<code>cloneRuleAction</code>",id:"cloneruleaction",level:4},{value:"<code>removeRuleAction</code>",id:"removeruleaction",level:4},{value:"<code>lockRuleAction</code>",id:"lockruleaction",level:4},{value:"<code>combinatorSelector</code>",id:"combinatorselector",level:4},{value:"<code>inlineCombinator</code>",id:"inlinecombinator",level:4},{value:"<code>dragHandle</code>",id:"draghandle",level:4},{value:"<code>fieldSelector</code>",id:"fieldselector",level:4},{value:"<code>operatorSelector</code>",id:"operatorselector",level:4},{value:"<code>valueEditor</code>",id:"valueeditor",level:4},{value:"<code>valueSourceSelector</code>",id:"valuesourceselector",level:4},{value:"<code>notToggle</code>",id:"nottoggle",level:4},{value:"<code>ruleGroup</code>",id:"rulegroup",level:4},{value:"<code>rule</code>",id:"rule",level:4},{value:"<code>getOperators</code>",id:"getoperators",level:3},{value:"<code>getValueEditorType</code>",id:"getvalueeditortype",level:3},{value:"<code>getValueSources</code>",id:"getvaluesources",level:3},{value:"<code>getInputType</code>",id:"getinputtype",level:3},{value:"<code>getValues</code>",id:"getvalues",level:3},{value:"<code>getDefaultField</code>",id:"getdefaultfield",level:3},{value:"<code>getDefaultOperator</code>",id:"getdefaultoperator",level:3},{value:"<code>getDefaultValue</code>",id:"getdefaultvalue",level:3},{value:"<code>onAddRule</code>",id:"onaddrule",level:3},{value:"<code>onAddGroup</code>",id:"onaddgroup",level:3},{value:"<code>onRemove</code>",id:"onremove",level:3},{value:"<code>controlClassnames</code>",id:"controlclassnames",level:3},{value:"<code>translations</code>",id:"translations",level:3},{value:"<code>showCombinatorsBetweenRules</code>",id:"showcombinatorsbetweenrules",level:3},{value:"<code>showNotToggle</code>",id:"shownottoggle",level:3},{value:"<code>showCloneButtons</code>",id:"showclonebuttons",level:3},{value:"<code>showLockButtons</code>",id:"showlockbuttons",level:3},{value:"<code>resetOnFieldChange</code>",id:"resetonfieldchange",level:3},{value:"<code>resetOnOperatorChange</code>",id:"resetonoperatorchange",level:3},{value:"<code>enableMountQueryChange</code>",id:"enablemountquerychange",level:3},{value:"<code>autoSelectField</code>",id:"autoselectfield",level:3},{value:"<code>autoSelectOperator</code>",id:"autoselectoperator",level:3},{value:"<code>addRuleToNewGroups</code>",id:"addruletonewgroups",level:3},{value:"<code>listsAsArrays</code>",id:"listsasarrays",level:3},{value:"<code>independentCombinators</code>",id:"independentcombinators",level:3},{value:"<code>enableDragAndDrop</code>",id:"enabledraganddrop",level:3},{value:"Recommended usage",id:"recommended-usage",level:4},{value:"<code>disabled</code>",id:"disabled",level:3},{value:"<code>debugMode</code>",id:"debugmode",level:3},{value:"<code>onLog</code>",id:"onlog",level:3},{value:"<code>validator</code>",id:"validator",level:3}],c={toc:u};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(r.ZP,{mdxType:"TypeScriptAdmonition"}),(0,o.kt)("p",null,"The default export of ",(0,o.kt)("inlineCode",{parentName:"p"},"react-querybuilder")," is the ",(0,o.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," React component (also available as a named export)."),(0,o.kt)("p",null,"All props are optional, but as stated in the ",(0,o.kt)("a",{parentName:"p",href:"../intro"},"getting started guide"),", the query builder is really only useful when, at a minimum, the ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," prop is defined."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"When you see ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeAny")," below (e.g. for ",(0,o.kt)("a",{parentName:"p",href:"#query"},"query"),", ",(0,o.kt)("a",{parentName:"p",href:"#defaultquery"},"defaultQuery"),", and ",(0,o.kt)("a",{parentName:"p",href:"#onquerychange"},"onQueryChange"),"), that means the type must either be ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupType")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC"),". However, if the type is ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC"),", then the ",(0,o.kt)("a",{parentName:"p",href:"#independentcombinators"},(0,o.kt)("inlineCode",{parentName:"a"},"independentCombinators")," prop")," must be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),". Likewise, if the type is ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupType")," then ",(0,o.kt)("inlineCode",{parentName:"p"},"independentCombinators")," must be ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),".")),(0,o.kt)("h2",{id:"props"},"Props"),(0,o.kt)("h3",{id:"fields"},(0,o.kt)("inlineCode",{parentName:"h3"},"fields")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Field[] | OptionGroup<Field>[] | Record<string, Field>")),(0,o.kt)("p",null,"The array of ",(0,o.kt)("a",{parentName:"p",href:"../typescript#fields"},"fields")," that should be used or an array of ",(0,o.kt)("a",{parentName:"p",href:"../typescript#miscellaneous"},"option groups")," containing arrays of fields. (Alternatively, ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," can be an object where the keys correspond to each field ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and the values are the field definitions. If ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," is an object, then the ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," array passed to the ",(0,o.kt)("a",{parentName:"p",href:"#fieldselector"},(0,o.kt)("inlineCode",{parentName:"a"},"fieldSelector")," component")," will be sorted alphabetically by the ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," property.)"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Field objects can also contain custom properties. Each field object will be passed in its entirety to the appropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"OperatorSelector")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ValueEditor")," components as the ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldData")," prop (see the section on ",(0,o.kt)("a",{parentName:"p",href:"#controlelements"},(0,o.kt)("inlineCode",{parentName:"a"},"controlElements")),").")),(0,o.kt)("h3",{id:"onquerychange"},(0,o.kt)("inlineCode",{parentName:"h3"},"onQueryChange")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(query: RuleGroupTypeAny) => void")),(0,o.kt)("p",null,"This function is invoked whenever the query is updated from within the component. The ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," is provided as an object of type ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupType")," by default. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "combinator": "and",\n  "not": false,\n  "rules": [\n    {\n      "field": "firstName",\n      "operator": "=",\n      "value": "Steve"\n    },\n    {\n      "field": "lastName",\n      "operator": "=",\n      "value": "Vai"\n    },\n    {\n      "combinator": "and",\n      "rules": [\n        {\n          "field": "age",\n          "operator": ">",\n          "value": "30"\n        }\n      ]\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"independentCombinators")," prop is provided, then the ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," argument will be of type ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC"),'. The "IC" version of the example above would look like this:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "not": false,\n  "rules": [\n    {\n      "field": "firstName",\n      "operator": "=",\n      "value": "Steve"\n    },\n    "and",\n    {\n      "field": "lastName",\n      "operator": "=",\n      "value": "Vai"\n    },\n    "and",\n    {\n      "rules": [\n        {\n          "field": "age",\n          "operator": ">",\n          "value": "30"\n        }\n      ]\n    }\n  ]\n}\n')),(0,o.kt)("h3",{id:"query"},(0,o.kt)("inlineCode",{parentName:"h3"},"query")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeAny")),(0,o.kt)("p",null,"The query is an object of type ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupType")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC"),", if ",(0,o.kt)("a",{parentName:"p",href:"#independentcombinators"},(0,o.kt)("inlineCode",{parentName:"a"},"independentCombinators"))," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"). If this prop is provided, ",(0,o.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," will be a ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/forms.html#controlled-components"},"controlled component"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," prop follows the same format as the parameter passed to the ",(0,o.kt)("a",{parentName:"p",href:"#onquerychange"},(0,o.kt)("inlineCode",{parentName:"a"},"onQueryChange"))," callback since they are meant to be used together to control the component. See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/react-querybuilder/react-querybuilder/blob/main/examples"},"examples"),"."),(0,o.kt)("h3",{id:"defaultquery"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultQuery")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeAny")),(0,o.kt)("p",null,"The initial query when ",(0,o.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," is uncontrolled."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Do not provide both ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultQuery")," props. To use ",(0,o.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," as a controlled component, provide and manage the ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," prop in combination with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onQueryChange")," callback. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultQuery")," (or neither query prop) to render an uncontrolled component."),(0,o.kt)("p",{parentName:"admonition"},'If both props are defined, TypeScript will throw an error during compilation and an error will be logged to the console during runtime (in "development" mode only). Errors will also be logged to the console if the ',(0,o.kt)("inlineCode",{parentName:"p"},"query")," prop is defined during one render and undefined in the next, or vice versa.")),(0,o.kt)("h3",{id:"context"},(0,o.kt)("inlineCode",{parentName:"h3"},"context")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"any")),(0,o.kt)("p",null,'A "bucket" for passing arbitrary props down to custom components (default components will ignore this prop). The ',(0,o.kt)("inlineCode",{parentName:"p"},"context")," prop is passed to each and every component, so it's accessible anywhere in the ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," component tree."),(0,o.kt)("h3",{id:"operators"},(0,o.kt)("inlineCode",{parentName:"h3"},"operators")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NameLabelPair[] | OptionGroup<NameLabelPair>[]")),(0,o.kt)("p",null,"The array of operators that should be used. The default operators include:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"[\n  { name: '=', label: '=' },\n  { name: '!=', label: '!=' },\n  { name: '<', label: '<' },\n  { name: '>', label: '>' },\n  { name: '<=', label: '<=' },\n  { name: '>=', label: '>=' },\n  { name: 'contains', label: 'contains' },\n  { name: 'beginsWith', label: 'begins with' },\n  { name: 'endsWith', label: 'ends with' },\n  { name: 'doesNotContain', label: 'does not contain' },\n  { name: 'doesNotBeginWith', label: 'does not begin with' },\n  { name: 'doesNotEndWith', label: 'does not end with' },\n  { name: 'null', label: 'is null' },\n  { name: 'notNull', label: 'is not null' },\n  { name: 'in', label: 'in' },\n  { name: 'notIn', label: 'not in' },\n  { name: 'between', label: 'between' },\n  { name: 'notBetween', label: 'not between' },\n];\n")),(0,o.kt)("h3",{id:"combinators"},(0,o.kt)("inlineCode",{parentName:"h3"},"combinators")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NameLabelPair[] | OptionGroup<NameLabelPair>[]")),(0,o.kt)("p",null,"The array of combinators that should be used for RuleGroups. The default set includes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"[\n  { name: 'and', label: 'AND' },\n  { name: 'or', label: 'OR' },\n];\n")),(0,o.kt)("h3",{id:"controlelements"},(0,o.kt)("inlineCode",{parentName:"h3"},"controlElements")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Controls {\n  addGroupAction?: React.ComponentType<ActionWithRulesAndAddersProps>;\n  addRuleAction?: React.ComponentType<ActionWithRulesAndAddersProps>;\n  cloneGroupAction?: React.ComponentType<ActionWithRulesProps>;\n  cloneRuleAction?: React.ComponentType<ActionProps>;\n  combinatorSelector?: React.ComponentType<CombinatorSelectorProps>;\n  inlineCombinator: ComponentType<InlineCombinatorProps>;\n  dragHandle?: React.ForwardRefExoticComponent<\n    DragHandleProps & React.RefAttributes<HTMLSpanElement>\n  >;\n  fieldSelector?: React.ComponentType<FieldSelectorProps>;\n  notToggle?: React.ComponentType<NotToggleProps>;\n  operatorSelector?: React.ComponentType<OperatorSelectorProps>;\n  removeGroupAction?: React.ComponentType<ActionWithRulesProps>;\n  removeRuleAction?: React.ComponentType<ActionProps>;\n  rule?: React.ComponentType<RuleProps>;\n  ruleGroup?: React.ComponentType<RuleGroupProps>;\n  valueEditor?: React.ComponentType<ValueEditorProps>;\n  valueSourceSelector?: React.ComponentType<ValueSourceSelectorProps>;\n}\n")),(0,o.kt)("p",null,"This is a custom controls object that allows you to override the default control elements. The following control overrides are supported:"),(0,o.kt)("h4",{id:"addgroupaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"addGroupAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionWithRulesAndAddersProps {\n  label: string; // translations.addGroup.label, e.g. "+Group"\n  title: string; // translations.addGroup.title, e.g. "Add group"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent, context?: any) => void; // Adds a new group\n  rules: (RuleGroupType | RuleType)[]; // Provides the number of rules already present for this group\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n}\n')),(0,o.kt)("h4",{id:"clonegroupaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"cloneGroupAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionWithRulesProps {\n  label: string; // translations.addGroup.label, e.g. "+Group"\n  title: string; // translations.addGroup.title, e.g. "Add group"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent) => void; // Clones the group\n  rules: (RuleGroupType | RuleType)[]; // Provides the number of rules already present for this group\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n}\n')),(0,o.kt)("h4",{id:"removegroupaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"removeGroupAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionWithRulesProps {\n  label: string; // translations.removeGroup.label, e.g. "x"\n  title: string; // translations.removeGroup.title, e.g. "Remove group"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent) => void; // Removes the group\n  rules: (RuleGroupType | RuleType)[]; // Provides the number of rules already present for this group\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n}\n')),(0,o.kt)("h4",{id:"lockgroupaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"lockGroupAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionWithRulesProps {\n  label: string; // translations.lockGroup.label, e.g. "\ud83d\udd13" when unlocked and "\ud83d\udd12" when locked\n  title: string; // translations.lockGroup.title, e.g. "Lock group" or "Unlock group"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent) => void; // Locks the group\n  rules: (RuleGroupType | RuleType)[]; // The rules present for this group\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n}\n')),(0,o.kt)("h4",{id:"addruleaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"addRuleAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionWithRulesAndAddersProps {\n  label: string; // translations.addGroup.label, e.g. "+Rule"\n  title: string; // translations.addGroup.title, e.g. "Add rule"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent, context?: any) => void; // Adds a new rule\n  rules: (RuleGroupType | RuleType)[]; // Provides the number of rules already present for this group\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n}\n')),(0,o.kt)("h4",{id:"cloneruleaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"cloneRuleAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionProps {\n  label: string; // translations.addGroup.label, e.g. "+Rule"\n  title: string; // translations.addGroup.title, e.g. "Add rule"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent) => void; // Clones the rule\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this rule\n}\n')),(0,o.kt)("h4",{id:"removeruleaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"removeRuleAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionProps {\n  label: string; // translations.removeRule.label, e.g. "x"\n  title: string; // translations.removeRule.title, e.g. "Remove rule"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent) => void; // Removes the rule\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this rule\n}\n')),(0,o.kt)("h4",{id:"lockruleaction"},(0,o.kt)("inlineCode",{parentName:"h4"},"lockRuleAction")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ActionProps {\n  label: string; // translations.lockRule.label, e.g. "\ud83d\udd13" when unlocked and "\ud83d\udd12" when locked\n  title: string; // translations.lockRule.title, e.g. "Lock rule" or "Unlock rule"\n  className: string; // CSS classNames to be applied\n  handleOnClick: (e: React.MouseEvent) => void; // Locks the rule\n  level: number; // The level of the current rule\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this rule\n}\n')),(0,o.kt)("h4",{id:"combinatorselector"},(0,o.kt)("inlineCode",{parentName:"h4"},"combinatorSelector")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<select />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface CombinatorSelectorProps {\n  options: NameLabelPair[] | OptionGroup<NameLabelPair>[]; // Same as 'combinators' passed into QueryBuilder\n  value: string; // Selected combinator from the existing query representation, if any\n  className: string; // CSS classNames to be applied\n  handleOnChange: (value: any) => void; // Updates the combinator\n  rules: (RuleGroupType | RuleType)[]; // Provides the number of rules already present for this group\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n}\n")),(0,o.kt)("h4",{id:"inlinecombinator"},(0,o.kt)("inlineCode",{parentName:"h4"},"inlineCombinator")),(0,o.kt)("p",null,"A small wrapper around the ",(0,o.kt)("inlineCode",{parentName:"p"},"combinatorSelector")," component. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface InlineCombinatorProps extends CombinatorSelectorProps {\n  component: Schema['controls']['combinatorSelector'];\n  path: number[];\n  moveRule: QueryActions['moveRule'];\n  independentCombinators?: boolean;\n}\n")),(0,o.kt)("h4",{id:"draghandle"},(0,o.kt)("inlineCode",{parentName:"h4"},"dragHandle")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<span />")," is used. Note that this component must be based on ",(0,o.kt)("inlineCode",{parentName:"p"},"React.forwardRef"),", and must always render an element (never return ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"). The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface DragHandleProps {\n  title: string; // translations.dragHandle.title, e.g. "Drag handle"\n  className: string; // CSS classNames to be applied\n  level: number; // The level of the current group\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n  label: string; // translations.dragHandle.label, e.g. "\u205e\u205e"\n}\n')),(0,o.kt)("h4",{id:"fieldselector"},(0,o.kt)("inlineCode",{parentName:"h4"},"fieldSelector")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<select />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface FieldSelectorProps {\n  options: Field[]; // Same as 'fields' passed into QueryBuilder\n  value: string; // Selected field from the existing query representation, if any\n  title: string; // translations.fields.title, e.g. \"Fields\"\n  operator: string; // Selected operator from the existing query representation, if any\n  className: string; // CSS classNames to be applied\n  handleOnChange: (value: any) => void; // Updates the rule's field\n  level: number; // The level the group this rule belongs to\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this rule\n}\n")),(0,o.kt)("h4",{id:"operatorselector"},(0,o.kt)("inlineCode",{parentName:"h4"},"operatorSelector")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<select />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface OperatorSelectorProps {\n  field: string; // Field name corresponding to this rule\n  fieldData: Field; // The entire object from the fields array for this field\n  options: NameLabelPair[] | OptionGroup<NameLabelPair>[]; // Return value of getOperators(field)\n  value: string; // Selected operator from the existing query representation, if any\n  title: string; // translations.operators.title, e.g. "Operators"\n  className: string; // CSS classNames to be applied\n  handleOnChange: (value: any) => void; // Updates the rule\'s operator\n  level: number; // The level the group this rule belongs to\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this rule\n}\n')),(0,o.kt)("h4",{id:"valueeditor"},(0,o.kt)("inlineCode",{parentName:"h4"},"valueEditor")),(0,o.kt)("p",null,"By default an ",(0,o.kt)("inlineCode",{parentName:"p"},'<input type="text" />')," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ValueEditorProps {\n  field: string; // Field name corresponding to this rule\n  fieldData: Field; // The entire object from the fields array for this field\n  operator: string; // Operator name corresponding to this rule\n  value: string; // Value from the existing query representation, if any\n  title: string; // translations.value.title, e.g. "Value"\n  handleOnChange: (value: any) => void; // Updates the rule\'s value\n  type: ValueEditorType; // Type of editor to be displayed\n  inputType: string; // @type of <input> if `type` is "text"\n  values: any[]; // List of available values for this rule\n  level: number; // The level the group this rule belongs to\n  className: string; // CSS classNames to be applied\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this rule\n}\n')),(0,o.kt)("h4",{id:"valuesourceselector"},(0,o.kt)("inlineCode",{parentName:"h4"},"valueSourceSelector")),(0,o.kt)("p",null,"By default a ",(0,o.kt)("inlineCode",{parentName:"p"},"<select />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface ValueSourceSelectorProps {\n  field: string; // Field name corresponding to this rule\n  fieldData: Field; // The entire object from the fields array for this field\n  options: ValueSourceOption[] | OptionGroup<ValueSourceOption>[]; // Return value of getValueSources(field, operator)\n  value: ValueSource; // Selected value source from the existing query representation, if any\n  title: string; // translations.valueSourceSelector.title, e.g. "Value source"\n  className: string; // CSS classNames to be applied\n  handleOnChange: (value: any) => void; // Updates the rule\'s value source\n  level: number; // The level the group this rule belongs to\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this rule\n}\n')),(0,o.kt)("h4",{id:"nottoggle"},(0,o.kt)("inlineCode",{parentName:"h4"},"notToggle")),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},'<label><input type="checkbox" />Not</label>')," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface NotToggleProps {\n  checked: boolean; // Whether the input should be checked or not\n  handleOnChange: (checked: boolean) => void; // Updates the group\'s "not" property\n  title: string; // translations.notToggle.title, e.g. "Invert this group"\n  level: number; // The level of the group\n  className: string; // CSS classNames to be applied\n  context: any; // Container for custom props that are passed to all components\n  validation: boolean | ValidationResult; // validation result of this group\n}\n')),(0,o.kt)("h4",{id:"rulegroup"},(0,o.kt)("inlineCode",{parentName:"h4"},"ruleGroup")),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"<RuleGroup />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface RuleGroupProps {\n  id?: string; // Unique identifier for this rule group\n  path: number[]; // path of indexes through a rule group hierarchy\n  ruleGroup: RuleGroupTypeAny; // The rule group object\n  translations: Translations; // The full translations object\n  schema: Schema; // See `Schema` on the TypeScript page\n  actions: QueryActions; // Query update functions\n  context: any; // Container for custom props that are passed to all components\n  disabled?: boolean; // Whether the rule itself is disabled\n  parentDisabled?: boolean; // Whether an ancestor of this rule is disabled\n}\n")),(0,o.kt)("h4",{id:"rule"},(0,o.kt)("inlineCode",{parentName:"h4"},"rule")),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"<Rule />")," is used. The following props are passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface RuleProps {\n  id?: string; // Unique identifier for this rule\n  path: number[]; // path of indexes through a rule group hierarchy\n  rule: RuleType; // The rule object\n  translations: Translations; // The full translations object\n  schema: Schema; // See `Schema` on the TypeScript page\n  actions: QueryActions; // Query update functions\n  context: any; // Container for custom props that are passed to all components\n  disabled?: boolean; // Whether the rule itself is disabled\n  parentDisabled?: boolean; // Whether an ancestor of this rule is disabled\n}\n")),(0,o.kt)("h3",{id:"getoperators"},(0,o.kt)("inlineCode",{parentName:"h3"},"getOperators")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(field: string) => NameLabelPair[] | OptionGroup<NameLabelPair>[] | null")),(0,o.kt)("p",null,"This function is invoked to get the list of allowed operators for the given field. If ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," is returned, the ",(0,o.kt)("a",{parentName:"p",href:"./misc#defaults"},"default operators")," are used."),(0,o.kt)("h3",{id:"getvalueeditortype"},(0,o.kt)("inlineCode",{parentName:"h3"},"getValueEditorType")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(field: string, operator: string) => ValueEditorType")),(0,o.kt)("p",null,"This function is invoked to get the type of ",(0,o.kt)("inlineCode",{parentName:"p"},"ValueEditor")," for the given field and operator. Allowed values are ",(0,o.kt)("inlineCode",{parentName:"p"},'"text"')," (the default if the function is not provided or if ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," is returned), ",(0,o.kt)("inlineCode",{parentName:"p"},'"select"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"checkbox"'),", and ",(0,o.kt)("inlineCode",{parentName:"p"},'"radio"'),"."),(0,o.kt)("h3",{id:"getvaluesources"},(0,o.kt)("inlineCode",{parentName:"h3"},"getValueSources")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(field: string, operator: string) => ValueSources"),";"),(0,o.kt)("p",null,'This function is invoked to get the list of allowed value sources for a given field and operator. The return value must be an array including at least "value" or "field", but may also contain both (in either order). If the prop is undefined, ',(0,o.kt)("inlineCode",{parentName:"p"},'() => ["value"]')," is used. The first element in the array will be the default."),(0,o.kt)("h3",{id:"getinputtype"},(0,o.kt)("inlineCode",{parentName:"h3"},"getInputType")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(field: string, operator: string) => string")),(0,o.kt)("p",null,"This function is invoked to get the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"<input />")," for the given field and operator (only applicable when ",(0,o.kt)("inlineCode",{parentName:"p"},"getValueEditorType")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},'"text"')," or a falsy value). If no function is provided, ",(0,o.kt)("inlineCode",{parentName:"p"},'"text"')," is used as the default."),(0,o.kt)("h3",{id:"getvalues"},(0,o.kt)("inlineCode",{parentName:"h3"},"getValues")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(field: string, operator: string) => NameLabelPair[] | OptionGroup<NameLabelPair>[]")),(0,o.kt)("p",null,"This function is invoked to get the list of allowed values for the given field and operator (only applicable when ",(0,o.kt)("inlineCode",{parentName:"p"},"getValueEditorType")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},'"select"')," or ",(0,o.kt)("inlineCode",{parentName:"p"},'"radio"'),"). If no function is provided, an empty array is used as the default."),(0,o.kt)("h3",{id:"getdefaultfield"},(0,o.kt)("inlineCode",{parentName:"h3"},"getDefaultField")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string | ((fieldsData: Field[]) => string)")),(0,o.kt)("p",null,"The default field for new rules. This can be a string identifying the default field, or a function that returns a field name."),(0,o.kt)("h3",{id:"getdefaultoperator"},(0,o.kt)("inlineCode",{parentName:"h3"},"getDefaultOperator")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string | ((field: string) => string)")),(0,o.kt)("p",null,"The default operator for new rules. This can be a string identifying the default operator, or a function that returns an operator name."),(0,o.kt)("h3",{id:"getdefaultvalue"},(0,o.kt)("inlineCode",{parentName:"h3"},"getDefaultValue")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(rule: RuleType) => any")),(0,o.kt)("p",null,"This function returns the default value for new rules."),(0,o.kt)("h3",{id:"onaddrule"},(0,o.kt)("inlineCode",{parentName:"h3"},"onAddRule")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(rule: RuleType, parentPath: number[], query: RuleGroupTypeAny, context?: any) => RuleType | false")),(0,o.kt)("p",null,"This callback is invoked before a new rule is added. The function should either manipulate the rule and return it as an object of type ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleType"),", or return ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to cancel the addition of the rule. You can use ",(0,o.kt)("a",{parentName:"p",href:"./misc#findpath"},(0,o.kt)("inlineCode",{parentName:"a"},"findPath"))," to locate the parent group to which the new rule will be added within the query hierarchy. The ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," parameter (fourth argument) can be passed from a custom ",(0,o.kt)("a",{parentName:"p",href:"#addruleaction"},(0,o.kt)("inlineCode",{parentName:"a"},"addRuleAction"))," component to its ",(0,o.kt)("inlineCode",{parentName:"p"},"onHandleClick")," prop, which will in turn pass it to ",(0,o.kt)("inlineCode",{parentName:"p"},"onAddRule"),". This allows one to change the rule that gets added (or avoid the action completely) based on arbitrary data."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To completely ",(0,o.kt)("a",{parentName:"p",href:"../tips/limit-groups"},"prevent the addition of new rules"),", pass ",(0,o.kt)("inlineCode",{parentName:"p"},"controlElements={{ addRuleAction: () => null }}"),' which will prevent the "+Rule" button from rendering.')),(0,o.kt)("h3",{id:"onaddgroup"},(0,o.kt)("inlineCode",{parentName:"h3"},"onAddGroup")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<RG extends RuleGroupTypeAny>(ruleGroup: RG, parentPath: number[], query: RG, context?: any) => RG | false")),(0,o.kt)("p",null,"This callback is invoked before a new group is added. The function should either manipulate the group and return it as an object of the same type (either ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupType")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC"),"), or return ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to cancel the addition of the group. You can use ",(0,o.kt)("a",{parentName:"p",href:"./misc#findpath"},(0,o.kt)("inlineCode",{parentName:"a"},"findPath"))," to locate the parent group to which the new group will be added within the query hierarchy. The ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," parameter (fourth argument) can be passed from a custom ",(0,o.kt)("a",{parentName:"p",href:"#addgroupaction"},(0,o.kt)("inlineCode",{parentName:"a"},"addGroupAction"))," component to its ",(0,o.kt)("inlineCode",{parentName:"p"},"onHandleClick")," prop, which will in turn pass it to ",(0,o.kt)("inlineCode",{parentName:"p"},"onAddGroup"),". This allows one to change the group that gets added (or avoid the action completely) based on arbitrary data."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To completely ",(0,o.kt)("a",{parentName:"p",href:"../tips/limit-groups"},"prevent the addition of new groups"),", pass ",(0,o.kt)("inlineCode",{parentName:"p"},"controlElements={{ addGroupAction: () => null }}"),' which will prevent the "+Group" button from rendering.')),(0,o.kt)("h3",{id:"onremove"},(0,o.kt)("inlineCode",{parentName:"h3"},"onRemove")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<RG extends RuleGroupTypeAny>(ruleOrGroup: RG | RuleType, path: number[], query: RG, context?: any) => boolean")),(0,o.kt)("p",null,"This callback is invoked before a rule or group is removed. The function should return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the removal should proceed as normal, or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," if the removal should be aborted."),(0,o.kt)("h3",{id:"controlclassnames"},(0,o.kt)("inlineCode",{parentName:"h3"},"controlClassnames")),(0,o.kt)("p",null,"This prop can be used to assign custom CSS classes to the various controls rendered by the ",(0,o.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," component. This is an object with the following signature. Each attribute is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Classname")," which can be a ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"string[]"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"Record<string, any>")," (see documentation for ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/clsx"},(0,o.kt)("inlineCode",{parentName:"a"},"clsx")),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface Classnames {\n  queryBuilder?: Classname; // Root <div> element\n  ruleGroup?: Classname; // <div> containing a RuleGroup\n  header?: Classname; // <div> containing the RuleGroup header controls\n  body?: Classname; // <div> containing the RuleGroup child rules/groups\n  combinators?: Classname; // <select> control for combinators\n  addRule?: Classname; // <button> to add a Rule\n  addGroup?: Classname; // <button> to add a RuleGroup\n  cloneRule?: Classname; // <button> to clone a Rule\n  cloneGroup?: Classname; // <button> to clone a RuleGroup\n  removeGroup?: Classname; // <button> to remove a RuleGroup\n  lockRule?: Classname; // <button> to lock/disable a Rule\n  lockGroup?: Classname; // <button> to lock/disable a RuleGroup\n  notToggle?: Classname; // <label> on the "not" toggle\n  rule?: Classname; // <div> containing the Rule\n  fields?: Classname; // <select> control for fields\n  operators?: Classname; // <select> control for operators\n  value?: Classname; // <input> for the field value\n  removeRule?: Classname; // <button> to remove a Rule\n  dragHandle?: Classname; // <span> as drag-and-drop handle\n  valueSource?: Classname; // <select> control for value source\n}\n')),(0,o.kt)("h3",{id:"translations"},(0,o.kt)("inlineCode",{parentName:"h3"},"translations")),(0,o.kt)("p",null,"This prop can be used to override translatable texts applied to various controls that are created by the ",(0,o.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," component. All keys in the object and all properties within each key are optional. Missing translations will default to the corresponding values below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "fields": {\n    "title": "Fields",\n    "placeholderName": "~",\n    "placeholderLabel": "------",\n    "placeholderGroupLabel": "------"\n  },\n  "operators": {\n    "title": "Operators",\n    "placeholderName": "~",\n    "placeholderLabel": "------",\n    "placeholderGroupLabel": "------"\n  },\n  "value": {\n    "title": "Value"\n  },\n  "removeRule": {\n    "label": "x",\n    "title": "Remove rule"\n  },\n  "removeGroup": {\n    "label": "x",\n    "title": "Remove group"\n  },\n  "addRule": {\n    "label": "+Rule",\n    "title": "Add rule"\n  },\n  "addGroup": {\n    "label": "+Group",\n    "title": "Add group"\n  },\n  "combinators": {\n    "title": "Combinators"\n  },\n  "notToggle": {\n    "label": "Not",\n    "title": "Invert this group"\n  },\n  "cloneRule": {\n    "label": "\u29c9",\n    "title": "Clone rule"\n  },\n  "cloneRuleGroup": {\n    "label": "\u29c9",\n    "title": "Clone group"\n  },\n  "dragHandle": {\n    "label": "\u205e\u205e",\n    "title": "Drag handle"\n  },\n  "lockRule": {\n    "label": "\ud83d\udd13",\n    "title": "Lock rule"\n  },\n  "lockGroup": {\n    "label": "\ud83d\udd13",\n    "title": "Lock group"\n  },\n  "lockRuleDisabled": {\n    "label": "\ud83d\udd12",\n    "title": "Unlock rule"\n  },\n  "lockGroupDisabled": {\n    "label": "\ud83d\udd12",\n    "title": "Unlock group"\n  }\n}\n')),(0,o.kt)("h3",{id:"showcombinatorsbetweenrules"},(0,o.kt)("inlineCode",{parentName:"h3"},"showCombinatorsBetweenRules")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"showCombinatorsBetweenRules",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to show the combinators (and/or) between rules and rule groups instead of at the top of rule groups. This can make some queries easier to understand as it encourages a more natural style of reading."),(0,o.kt)("h3",{id:"shownottoggle"},(0,o.kt)("inlineCode",{parentName:"h3"},"showNotToggle")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"showNotToggle",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),' to show the "Not" (aka inversion) toggle switch for each rule group.'),(0,o.kt)("h3",{id:"showclonebuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"showCloneButtons")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"showCloneButtons",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),' to show a "clone" button on each rule and group. Clicking a "clone" button will create an exact duplicate (with new ',(0,o.kt)("inlineCode",{parentName:"p"},"id"),"s) of the rule or group, positioned immediately below the original."),(0,o.kt)("h3",{id:"showlockbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"showLockButtons")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"showLockButtons",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),' to show the "Lock rule" and "Lock group" buttons. When a rule is locked, all elements within the rule will be disabled (except for the lock button, so the user can unlock it). When a group is locked, all elements within the group header (except the lock button), as well as all child rule/group elements, will be disabled.'),(0,o.kt)("h3",{id:"resetonfieldchange"},(0,o.kt)("inlineCode",{parentName:"h3"},"resetOnFieldChange")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"resetOnFieldChange",disabled:!0,mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to avoid resetting the operator and value when the field changes."),(0,o.kt)("h3",{id:"resetonoperatorchange"},(0,o.kt)("inlineCode",{parentName:"h3"},"resetOnOperatorChange")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"resetOnOperatorChange",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to reset the value when the operator changes."),(0,o.kt)("h3",{id:"enablemountquerychange"},(0,o.kt)("inlineCode",{parentName:"h3"},"enableMountQueryChange")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to disable the ",(0,o.kt)("inlineCode",{parentName:"p"},"onQueryChange")," call on mount of the component which will set the default value."),(0,o.kt)("h3",{id:"autoselectfield"},(0,o.kt)("inlineCode",{parentName:"h3"},"autoSelectField")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"autoSelectField",disabled:!0,mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),' to automatically add an "empty" option with value ',(0,o.kt)("inlineCode",{parentName:"p"},'"~"')," and label ",(0,o.kt)("inlineCode",{parentName:"p"},'"------"')," (see ",(0,o.kt)("a",{parentName:"p",href:"#translations"},(0,o.kt)("inlineCode",{parentName:"a"},"translations.fields.placeholder*")," to customize"),") to the ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," array as the first element. The empty option will be the initial selection for all new rules. When the empty field option is selected, the operator and value editor components will not display for that rule."),(0,o.kt)("h3",{id:"autoselectoperator"},(0,o.kt)("inlineCode",{parentName:"h3"},"autoSelectOperator")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"autoSelectOperator",disabled:!0,mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),' to automatically add an "empty" option with value ',(0,o.kt)("inlineCode",{parentName:"p"},'"~"')," and label ",(0,o.kt)("inlineCode",{parentName:"p"},'"------"')," (see ",(0,o.kt)("a",{parentName:"p",href:"#translations"},(0,o.kt)("inlineCode",{parentName:"a"},"translations.operators.placeholder*")," to customize"),") to the ",(0,o.kt)("inlineCode",{parentName:"p"},"operators")," array as the first element. The empty option will be the initial selection for all new rules. When the empty operator option is selected, the value editor component will not display for that rule."),(0,o.kt)("h3",{id:"addruletonewgroups"},(0,o.kt)("inlineCode",{parentName:"h3"},"addRuleToNewGroups")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"addRuleToNewGroups",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to automatically add a rule to new groups. If a ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," prop is not passed in, a rule will be added to the root group when the component is mounted. If a ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," prop is passed in with an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"rules")," array, no rule will be added automatically."),(0,o.kt)("h3",{id:"listsasarrays"},(0,o.kt)("inlineCode",{parentName:"h3"},"listsAsArrays")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"listsAsArrays",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to update rule values that represent lists with proper arrays instead of comma-separated strings. Applies when ",(0,o.kt)("inlineCode",{parentName:"p"},"valueEditorType"),' is "multiselect" and when a rule\'s ',(0,o.kt)("inlineCode",{parentName:"p"},"operator"),' is "between", "notBetween", "in", or "notIn".'),(0,o.kt)("p",null,'For example, the default behavior for the "between" operator might produce this rule:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{4}","{4}":!0},'{\n  "field": "f1",\n  "operator": "between",\n  "value": "f2,f3",\n  "valueSource": "field"\n}\n')),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"listsAsArrays")," is true, the rule's ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," will be an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{4}","{4}":!0},'{\n  "field": "f1",\n  "operator": "between",\n  "value": ["f2", "f3"],\n  "valueSource": "field"\n}\n')),(0,o.kt)("h3",{id:"independentcombinators"},(0,o.kt)("inlineCode",{parentName:"h3"},"independentCombinators")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"independentCombinators",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to insert an independent combinator selector between each rule/group in a rule group. The combinator selector at the group level will not be rendered."),(0,o.kt)("p",null,"Visually, this option has a similar effect as the ",(0,o.kt)("a",{parentName:"p",href:"#showcombinatorsbetweenrules"},(0,o.kt)("inlineCode",{parentName:"a"},"showCombinatorsBetweenRules"))," option, except that each combinator selector is independently controlled. You may find that users take to this configuration more easily, as it can allow them to express queries more like they would in natural language."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"independentCombinators")," option is enabled, the ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultQuery"),") prop ",(0,o.kt)("em",{parentName:"p"},"must")," be of type ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC")," instead of the default ",(0,o.kt)("inlineCode",{parentName:"p"},"RuleGroupType"),". See ",(0,o.kt)("a",{parentName:"p",href:"#onquerychange"},(0,o.kt)("inlineCode",{parentName:"a"},"onQueryChange"))," above, or the ",(0,o.kt)("a",{parentName:"p",href:"../typescript#rules-and-groups"},"Rules and groups section")," of the TypeScript documentation for more information.")),(0,o.kt)("h3",{id:"enabledraganddrop"},(0,o.kt)("inlineCode",{parentName:"h3"},"enableDragAndDrop")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"enableDragAndDrop",mdxType:"DemoLink"}))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This prop does not need to be set directly. If used directly, it has no effect unless the following conditions are met:"),(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"QueryBuilderDnD")," context provider from the companion package ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@react-querybuilder/dnd"},(0,o.kt)("inlineCode",{parentName:"a"},"@react-querybuilder/dnd"))," is rendered higher up in the component tree."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/react-dnd"},(0,o.kt)("inlineCode",{parentName:"a"},"react-dnd"))," and ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/react-dnd-html5-backend"},(0,o.kt)("inlineCode",{parentName:"a"},"react-dnd-html5-backend"))," are also installed.")),(0,o.kt)("p",{parentName:"admonition"},"If those conditions are met, and ",(0,o.kt)("inlineCode",{parentName:"p"},"enableDragAndDrop")," is not explicitly set to ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," element, then ",(0,o.kt)("inlineCode",{parentName:"p"},"enableDragAndDrop")," is implicitly set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," (under the conditions detailed above), a drag handle is displayed on the left-hand side of each group header and each rule. Clicking and dragging the handle element allows users to visually reorder the rules and groups."),(0,o.kt)("h4",{id:"recommended-usage"},"Recommended usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add react-querybuilder @react-querybuilder/dnd react-dnd react-dnd-html5-backend\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { QueryBuilderDnD } from '@react-querybuilder/dnd';\nimport * as ReactDnD from 'react-dnd';\nimport * as ReactDndHtml5Backend from 'react-dnd-html5-backend';\nimport { QueryBuilder } from 'react-querybuilder';\n\nconst App = () => (\n  <QueryBuilderDnD dnd={{ ...ReactDnD, ...ReactDndHtml5Backend }}>\n    <QueryBuilder />\n  </QueryBuilderDnD>\n);\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If your application already uses ",(0,o.kt)("a",{parentName:"p",href:"https://react-dnd.github.io/react-dnd/"},(0,o.kt)("inlineCode",{parentName:"a"},"react-dnd")),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilderDndWithoutProvider")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilderDnD"),". They are functionally equivalent, but the former relies on your pre-existing ",(0,o.kt)("inlineCode",{parentName:"p"},"<DndProvider />")," (as long as it is higher up in the component tree). The latter renders its own provider which will clash with an ancestor ",(0,o.kt)("inlineCode",{parentName:"p"},"DndProvider"),'. (If you use the wrong component, you will probably see the error message "Cannot have two HTML5 backends at the same time.")')),(0,o.kt)("h3",{id:"disabled"},(0,o.kt)("inlineCode",{parentName:"h3"},"disabled")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean | number[][]")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"disabled",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to disable all subcomponents and prevent changes to the query. Pass an array of paths to disable specific rules and/or groups, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled={[[0]]}")," will disable the first rule and its subcomponents but nothing else."),(0,o.kt)("h3",{id:"debugmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"debugMode")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),") ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"debugMode",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to log debugging information to the console (or the ",(0,o.kt)("a",{parentName:"p",href:"#onlog"},(0,o.kt)("inlineCode",{parentName:"a"},"onLog")," function")," if provided)."),(0,o.kt)("h3",{id:"onlog"},(0,o.kt)("inlineCode",{parentName:"h3"},"onLog")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(message: any) => void")," (default ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log"),")"),(0,o.kt)("p",null,"Captures log messages when ",(0,o.kt)("inlineCode",{parentName:"p"},"debugMode")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("h3",{id:"validator"},(0,o.kt)("inlineCode",{parentName:"h3"},"validator")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"QueryValidator")," ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(l.L,{option:"validateQuery",mdxType:"DemoLink"}))),(0,o.kt)("p",null,"This function is executed each time ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," renders. The return value should be a boolean (",(0,o.kt)("inlineCode",{parentName:"p"},"true")," for valid queries, ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," for invalid) or an object whose keys are the ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"s of each rule and group in the query tree. If such an object is returned, the values associated to each key should be a boolean (",(0,o.kt)("inlineCode",{parentName:"p"},"true")," for valid rules/groups, ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," for invalid) or an object with a ",(0,o.kt)("inlineCode",{parentName:"p"},"valid")," boolean property and an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"reasons")," array. The full object will be passed to each rule and group component, and all sub-components of each rule/group will receive the value associated with the rule's or group's ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),". See the ",(0,o.kt)("a",{parentName:"p",href:"./validation"},"Validation")," documentation for more information."))}m.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=d(t),m=o,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||l;return t?a.createElement(h,r(r({ref:n},s),{},{components:t})):a.createElement(h,r({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=c;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var d=2;d<l;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);