"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1321],{5182:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=r(24246),i=r(71670);const s={title:"Migrating to v4",hide_table_of_contents:!0},d=void 0,a={id:"migrate",title:"Migrating to v4",description:"React Query Builder v4 was mainly a feature release, but changes to the structure of the rendered HTML necessitated a major version bump.",source:"@site/versioned_docs/version-4/migrate.mdx",sourceDirName:".",slug:"/migrate",permalink:"/docs/4/migrate",draft:!1,unlisted:!1,editUrl:"https://github.com/react-querybuilder/react-querybuilder/edit/main/website/versioned_docs/version-4/migrate.mdx",tags:[],version:"4",frontMatter:{title:"Migrating to v4",hide_table_of_contents:!0},sidebar:"mySidebar",previous:{title:"UMD build",permalink:"/docs/4/umd"}},o={},c=[];function l(e){const t=Object.assign({p:"p",code:"code",admonition:"admonition",pre:"pre"},(0,i.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"React Query Builder v4 was mainly a feature release, but changes to the structure of the rendered HTML necessitated a major version bump."}),"\n",(0,n.jsxs)(t.p,{children:["A new drag handle ",(0,n.jsx)(t.code,{children:"<span />"})," element will always be rendered at the front of every rule and rule group header element, regardless of whether you enable the drag-and-drop feature. If drag-and-drop is disabled (the default setting), you should hide the drag handle by either 1) using the default stylesheet which hides it automatically when drag-and-drop is disabled, or 2) hiding it with a style rule like ",(0,n.jsx)(t.code,{children:".queryBuilder-dragHandle { display: none; }"}),"."]}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.p,{children:"The default stylesheet can be loaded as CSS or SCSS:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import 'react-querybuilder/dist/query-builder.css';\n// OR\nimport 'react-querybuilder/dist/query-builder.scss';\n"})})]}),"\n",(0,n.jsxs)(t.p,{children:["If using TypeScript, custom ",(0,n.jsx)(t.code,{children:"operatorSelector"})," components will need to accommodate ",(0,n.jsx)(t.code,{children:"OptionGroup<NameLabelPair>[]"})," in addition to the normal ",(0,n.jsx)(t.code,{children:"NameLabelPair[]"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Internal methods for immutably updating queries have been moved from the ",(0,n.jsx)(t.code,{children:"schema"})," prop to the new ",(0,n.jsx)(t.code,{children:"actions"})," prop on both ",(0,n.jsx)(t.code,{children:"RuleProps"})," and ",(0,n.jsx)(t.code,{children:"RuleGroupProps"}),". Custom ",(0,n.jsx)(t.code,{children:"<Rule />"})," and ",(0,n.jsx)(t.code,{children:"<RuleGroup />"})," components will need to adjust their prop declarations."]})]})}const u=function(e={}){const{wrapper:t}=Object.assign({},(0,i.a)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},71670:(e,t,r)=>{r.d(t,{a:()=>d});var n=r(27378);const i={},s=n.createContext(i);function d(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);