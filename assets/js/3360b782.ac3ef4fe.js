"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36272],{67125:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>o});var i=n(62540),s=n(65404);const l={title:"Migrating to v7"},d=void 0,t={id:"migrate",title:"Migrating to v7",description:"Version 7 shouldn't require many\u2014if any\u2014code changes when migrating from v6, although some of the defaults have changed. Also, taking advantage of the performance improvements, new features, and other conveniences may require some minor refactoring. A summary of the important changes is below.",source:"@site/versioned_docs/version-7/migrate.md",sourceDirName:".",slug:"/migrate",permalink:"/docs/migrate",draft:!1,unlisted:!1,editUrl:"https://github.com/react-querybuilder/react-querybuilder/edit/main/website/versioned_docs/version-7/migrate.md",tags:[],version:"7",frontMatter:{title:"Migrating to v7"},sidebar:"mySidebar",previous:{title:"Buildless",permalink:"/docs/buildless"}},c={},o=[{value:"Breaking changes",id:"breaking-changes",level:2},{value:"React 18",id:"react-18",level:3},{value:"TypeScript updates",id:"typescript-updates",level:3},{value:"<code>QueryBuilder</code> props",id:"querybuilder-props",level:4},{value:"<code>Option</code>-type props",id:"option-type-props",level:4},{value:"Parser functions removed from main bundle",id:"parser-functions-removed-from-main-bundle",level:3},{value:"Miscellaneous",id:"miscellaneous",level:3},{value:"New features",id:"new-features",level:2},{value:"Performance improvements",id:"performance-improvements",level:3},{value:"Option list <code>value</code> identifiers",id:"option-list-value-identifiers",level:3},{value:"Bulk override action elements, value selectors",id:"bulk-override-action-elements-value-selectors",level:3},{value:"Query selector, getter, and dispatcher",id:"query-selector-getter-and-dispatcher",level:3},{value:"Standalone layout stylesheet",id:"standalone-layout-stylesheet",level:3},{value:"Field data passed to <code>get*</code> callbacks",id:"field-data-passed-to-get-callbacks",level:3},{value:"Field data passed to <code>formatQuery</code> rule processors",id:"field-data-passed-to-formatquery-rule-processors",level:3},{value:"Simpler PostgreSQL compatibility for <code>formatQuery</code>",id:"simpler-postgresql-compatibility-for-formatquery",level:3},{value:"Shift actions",id:"shift-actions",level:3},{value:"Accessibility",id:"accessibility",level:3},{value:"Drag-and-drop <code>canDrop</code> callback",id:"drag-and-drop-candrop-callback",level:3},{value:"Enhanced <code>parseNumber</code> behavior",id:"enhanced-parsenumber-behavior",level:3},{value:"SpEL parser",id:"spel-parser",level:3},{value:"Updated default labels",id:"updated-default-labels",level:2},{value:"Main package",id:"main-package",level:3},{value:"Compatibility packages",id:"compatibility-packages",level:3},{value:"Ant Design (<code>@react-querybuilder/antd</code>)",id:"ant-design-react-querybuilderantd",level:4},{value:"Bootstrap (<code>@react-querybuilder/bootstrap</code>)",id:"bootstrap-react-querybuilderbootstrap",level:4},{value:"Chakra UI (<code>@react-querybuilder/chakra</code>)",id:"chakra-ui-react-querybuilderchakra",level:4},{value:"Fluent UI (<code>@react-querybuilder/fluent</code>)",id:"fluent-ui-react-querybuilderfluent",level:4},{value:"MUI/Material (<code>@react-querybuilder/material</code>)",id:"muimaterial-react-querybuildermaterial",level:4}];function a(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["Version 7 shouldn't require many\u2014if any\u2014code changes when migrating from v6, although ",(0,i.jsx)(r.a,{href:"#updated-default-labels",children:"some of the defaults have changed"}),". Also, taking advantage of the ",(0,i.jsx)(r.a,{href:"#performance-improvements",children:"performance improvements"}),", ",(0,i.jsx)(r.a,{href:"#shift-actions",children:"new features"}),", and ",(0,i.jsx)(r.a,{href:"#option-list-value-identifiers",children:"other"})," ",(0,i.jsx)(r.a,{href:"#query-selector-getter-and-dispatcher",children:"conveniences"})," may require some minor refactoring. A summary of the important changes is below."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsxs)(r.em,{children:["Previous migration instructions: ",(0,i.jsx)(r.a,{href:"/docs/6/migrate",children:"v5 to v6"})," / ",(0,i.jsx)(r.a,{href:"/docs/5/migrate",children:"v4 to v5"})," / ",(0,i.jsx)(r.a,{href:"/docs/4/migrate",children:"v3 to v4"}),"."]})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,i.jsx)(r.h3,{id:"react-18",children:"React 18"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["The minimum React version is now 18. (This is due to the new ",(0,i.jsx)(r.code,{children:"react-redux"})," v9 dependency, but we're investigating ways to support React 16.8 and 17.)"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"typescript-updates",children:"TypeScript updates"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"The minimum TypeScript version is now 5.1."}),"\n",(0,i.jsx)(r.li,{children:"The component props themselves haven't changed much from version 6, but their TypeScript interfaces have been overhauled."}),"\n",(0,i.jsx)(r.li,{children:"If you haven't specified generics on the prop interfaces for your custom subcomponents, you may not need to make any TypeScript-related changes."}),"\n"]}),"\n",(0,i.jsxs)(r.h4,{id:"querybuilder-props",children:[(0,i.jsx)(r.code,{children:"QueryBuilder"})," props"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["The query type (extending ",(0,i.jsx)(r.code,{children:"RuleGroupType"})," or ",(0,i.jsx)(r.code,{children:"RuleGroupTypeIC"}),") will be automatically inferred from the ",(0,i.jsx)(r.code,{children:"query"})," or ",(0,i.jsx)(r.code,{children:"defaultQuery"})," prop instead of relying on the now-deprecated (and ignored) ",(0,i.jsx)(r.code,{children:"independentCombinators"})," prop. See ",(0,i.jsx)(r.a,{href:"./components/querybuilder#independent-combinators",children:"independent combinators"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"QueryBuilderProps"})," now requires four generic arguments."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["This shouldn't affect JSX which renders a ",(0,i.jsx)(r.code,{children:"<QueryBuilder />"})," component since the generic types can almost always be inferred from the props."]}),"\n",(0,i.jsxs)(r.li,{children:["While all props are technically still optional, TypeScript may have problems inferring the generics if ",(0,i.jsx)(r.code,{children:"fields"})," and ",(0,i.jsx)(r.code,{children:"query"}),"/",(0,i.jsx)(r.code,{children:"defaultQuery"})," are not provided."]}),"\n",(0,i.jsxs)(r.li,{children:["The four generic arguments of ",(0,i.jsx)(r.code,{children:"QueryBuilderProps"})," represent, respectively, the query type (extending ",(0,i.jsx)(r.code,{children:"RuleGroupType"})," or ",(0,i.jsx)(r.code,{children:"RuleGroupTypeIC"}),"), the field type, the operator type, and the combinator type. The latter three must extend ",(0,i.jsx)(r.code,{children:"FullOption"})," or the more specific and expressive ",(0,i.jsx)(r.code,{children:"FullField"}),"/",(0,i.jsx)(r.code,{children:"FullOperator"}),"/",(0,i.jsx)(r.code,{children:"FullCombinator"}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:'// Valid in version 6:\nconst qbp6: QueryBuilderProps = {};\n\n// Version 7 with the defaults (equivalent to the "version 6" line above):\nconst qbp7: QueryBuilderProps<RuleGroupType, FullField, FullOperator, FullCombinator> = {};\n\n// Also valid in version 7 (since FullField, FullOperator, and FullCombinator all extend FullOption):\nconst qbp7a: QueryBuilderProps<RuleGroupType, FullOption, FullOption, FullOption> = {};\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.h4,{id:"option-type-props",children:[(0,i.jsx)(r.code,{children:"Option"}),"-type props"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Custom subcomponents must now accept any option-type props (fields, operators, values, etc.) as an extension of ",(0,i.jsx)(r.code,{children:"FullOption"})," instead of ",(0,i.jsx)(r.code,{children:"Option"}),".","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"Full*"})," types are identical to their version 6 counterparts except for the ",(0,i.jsx)(r.code,{children:"value"})," property, which is required and must be the same type as the ",(0,i.jsx)(r.code,{children:"name"})," property."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"*ByValue"})," types are identical to their ",(0,i.jsx)(r.code,{children:"Full*"})," counterparts except that the ",(0,i.jsx)(r.code,{children:"name"})," property is optional."]}),"\n",(0,i.jsxs)(r.li,{children:["Relevant interfaces include the following:","\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Interface"}),(0,i.jsx)(r.th,{children:'"Full*" counterpart'}),(0,i.jsx)(r.th,{children:'"*ByValue" counterpart'})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"Field"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"FullField"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"FieldByValue"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"Operator"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"FullOperator"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"OperatorByValue"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"Combinator"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"FullCombinator"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"CombinatorByValue"})})]})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["The first generic argument of ",(0,i.jsx)(r.code,{children:"ValueEditorProps"}),", ",(0,i.jsx)(r.code,{children:"ValueSelectorProps"}),", and ",(0,i.jsx)(r.code,{children:"FieldSelectorProps"})," must extend ",(0,i.jsx)(r.code,{children:"FullOption"})," instead of ",(0,i.jsx)(r.code,{children:"Option"})," as in version 6.","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["In the case of ",(0,i.jsx)(r.code,{children:"ValueEditorProps"})," and ",(0,i.jsx)(r.code,{children:"FieldSelectorProps"}),", prefer ",(0,i.jsx)(r.code,{children:"FullField"})," over ",(0,i.jsx)(r.code,{children:"FullOption"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Where editor/selector prop type generics have been used, upgrading to version 7 should only require a minor update similar to this:","\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-diff",children:' type MyFieldNames = "firstName" | "lastName" | "birthdate";\n-const MyValueEditor = (props: ValueEditorProps<Field<MyFieldNames>>) => {\n+const MyValueEditor = (props: ValueEditorProps<FullField<MyFieldNames>>) => {\n   //                                           ^ Field -> FullField\n   return <ValueEditor {...props} />\n}\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"parser-functions-removed-from-main-bundle",children:"Parser functions removed from main bundle"}),"\n",(0,i.jsxs)(r.p,{children:["Since the ",(0,i.jsx)(r.a,{href:"./utils/import",children:"parser functions"})," are used less frequently than other utility functions\u2014and not generally alongside each other\u2014they have been removed from the main export. Although these functions have been available as separate exports since version 6 (along with ",(0,i.jsx)(r.a,{href:"./utils/export",children:(0,i.jsx)(r.code,{children:"formatQuery"})})," and ",(0,i.jsx)(r.a,{href:"./utils/misc#transformquery",children:(0,i.jsx)(r.code,{children:"transformQuery"})}),"), they could still be imported from ",(0,i.jsx)(r.code,{children:'"react-querybuilder"'}),". They are now available ",(0,i.jsx)(r.em,{children:"only"})," as separate exports. (This change reduced the main bundle size by almost 50%.)"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-diff",children:' // Version 6 only\n-import { parseCEL } from "react-querybuilder"\n-import { parseJsonLogic } from "react-querybuilder"\n-import { parseMongoDB } from "react-querybuilder"\n-import { parseSQL } from "react-querybuilder"\n\n // Version 6 or 7\n+import { parseCEL } from "react-querybuilder/parseCEL"\n+import { parseJsonLogic } from "react-querybuilder/parseJsonLogic"\n+import { parseMongoDB } from "react-querybuilder/parseMongoDB"\n+import { parseSQL } from "react-querybuilder/parseSQL"\n // (New in version 7)\n+import { parseSpEL } from "react-querybuilder/parseSpEL"\n+import { parseJSONata } from "react-querybuilder/parseJSONata"\n'})}),"\n",(0,i.jsx)(r.h3,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"@react-querybuilder/mantine"})," now requires Mantine 7 or greater."]}),"\n",(0,i.jsxs)(r.li,{children:["The ",(0,i.jsx)(r.code,{children:'"json_without_ids"'})," export format now explicitly removes the ",(0,i.jsx)(r.code,{children:"id"})," and ",(0,i.jsx)(r.code,{children:"path"})," properties from the output wihtout removing other properties. Previously this format would only ",(0,i.jsx)(r.em,{children:"include"})," specific properties, removing any custom properties. The following command will replicate the previous behavior:","\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"JSON.stringify(query, ['rules', 'field', 'value', 'operator', 'combinator', 'not', 'valueSource']);\n"})}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"parseMongoDB"})," now generates more concise queries when it encounters ",(0,i.jsx)(r.code,{children:"$not"})," operators that specify a single, boolean condition. Whereas previously that would yield a rule group with ",(0,i.jsx)(r.code,{children:"not: true"}),", it now generates a rule with a negated operator (",(0,i.jsx)(r.code,{children:'"="'})," becomes ",(0,i.jsx)(r.code,{children:'"!="'}),", ",(0,i.jsx)(r.code,{children:'"contains"'})," becomes ",(0,i.jsx)(r.code,{children:'"doesNotContain"'}),", etc.). To prevent this behavior, set the ",(0,i.jsx)(r.code,{children:"preventOperatorNegation"})," option to ",(0,i.jsx)(r.code,{children:"true"}),". (This change does not apply to operators defined in the ",(0,i.jsx)(r.code,{children:"additionalOperators"})," option.)"]}),"\n",(0,i.jsxs)(r.li,{children:["Paths are now declared with a new type alias ",(0,i.jsx)(r.code,{children:"Path"})," instead of ",(0,i.jsx)(r.code,{children:"number[]"}),". The actual type is the same: ",(0,i.jsx)(r.code,{children:"type Path = number[]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["The ",(0,i.jsx)(r.code,{children:"RuleGroupTypeIC"})," interface now includes ",(0,i.jsx)(r.code,{children:"combinator?: undefined"})," to ensure that query objects implementing ",(0,i.jsx)(r.a,{href:"./components/querybuilder#independent-combinators",children:"independent combinators"})," do not contain ",(0,i.jsx)(r.code,{children:"combinator"})," properties."]}),"\n",(0,i.jsxs)(r.li,{children:["The ",(0,i.jsx)(r.code,{children:"useQueryBuilder"})," hook has been split into ",(0,i.jsx)(r.code,{children:"useQueryBuilderSetup"})," and ",(0,i.jsx)(r.code,{children:"useQueryBuilderSchema"}),". ",(0,i.jsx)(r.code,{children:"useQueryBuilderSchema"})," must be called from a child component of one that calls ",(0,i.jsx)(r.code,{children:"useQueryBuilderSetup"})," (",(0,i.jsx)(r.code,{children:"QueryBuilder"})," takes care of that internally). For example usage, see the ",(0,i.jsxs)(r.a,{href:"https://github.com/react-querybuilder/react-querybuilder/blob/main/packages/react-querybuilder/src/components/QueryBuilder.tsx",children:[(0,i.jsx)(r.code,{children:"QueryBuilder"})," source code"]}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["The ",(0,i.jsx)(r.code,{children:"useStopEventPropagation"})," hook, called from the default ",(0,i.jsx)(r.code,{children:"Rule"})," and ",(0,i.jsx)(r.code,{children:"RuleGroup"})," components, now takes a single function as its parameter instead of an object map of functions. It must be run for each wrapped function individually."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"new-features",children:"New features"}),"\n",(0,i.jsx)(r.h3,{id:"performance-improvements",children:"Performance improvements"}),"\n",(0,i.jsx)(r.admonition,{title:"TL;DR",type:"tip",children:(0,i.jsxs)(r.p,{children:["Each prop passed to ",(0,i.jsx)(r.code,{children:"QueryBuilder"})," should have a stable reference or be memoized."]})}),"\n",(0,i.jsxs)(r.p,{children:["Props, components, and derived values are aggressively memoized in version 7 with ",(0,i.jsx)(r.code,{children:"React.memo"}),", ",(0,i.jsx)(r.code,{children:"useMemo"}),", and ",(0,i.jsx)(r.code,{children:"useCallback"}),". This can noticeably improve rendering performance for large queries, especially when using certain style libraries. To take advantage of this change, ",(0,i.jsx)(r.em,{children:"every"})," prop (except ",(0,i.jsx)(r.code,{children:"query"}),", if used) must have a stable reference or at least be memoized. For related reasons, we encourage using ",(0,i.jsx)(r.code,{children:"QueryBuilder"})," as an uncontrolled component by specifying ",(0,i.jsx)(r.code,{children:"defaultQuery"})," instead of ",(0,i.jsx)(r.code,{children:"query"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["You can avoid unstable references by moving unchanging props, including object, array, and function definitions, outside the component rendering function. This commonly includes the ",(0,i.jsx)(r.code,{children:"fields"})," array and ",(0,i.jsx)(r.code,{children:"onQueryChange"})," callback. For props that ",(0,i.jsx)(r.em,{children:"must"})," be defined inside the component, memoize them with ",(0,i.jsx)(r.code,{children:"useMemo"})," or ",(0,i.jsx)(r.code,{children:"useCallback"}),". Particularly avoid defining props inline in the JSX."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"/**\n * BAD:\n */\nfunction App() {\n  const { t } = useTranslation(); // (<-- third-party i18n library)\n  const [query, setQuery] = useState();\n\n  // This function gets recreated on each render\n  const getOperators = (field: Field) => t(defaultOperators);\n\n  return (\n    <QueryBuilder\n      // Avoid inline function definitions\n      onQueryChange={q => setQuery(q)}\n      // Avoid inline array definitions\n      fields={[\n        { name: 'firstName', label: 'First Name' },\n        { name: 'lastName', label: 'Last Name' },\n      ]}\n      // See above\n      getOperators={getOperators}\n    />\n  );\n}\n\n/**\n * GOOD:\n */\n// Fields array never changes, so it can be defined outside the component\nconst fields: Field[] = [\n  { name: 'firstName', label: 'First Name' },\n  { name: 'lastName', label: 'Last Name' },\n];\nfunction App() {\n  const { t } = useTranslation(); // (<-- third-party i18n library)\n  const [query, setQuery] = useState();\n\n  // Memoize functions with useCallback. Since `t` (probably) has a\n  // stable reference, this function will rarely be recreated, if ever\n  const getOperators = useCallback((field: Field) => t(defaultOperators), [t]);\n\n  return (\n    <QueryBuilder\n      // React useState/useReducer setters always have stable references,\n      // even when defined within the render method\n      onQueryChange={setQuery}\n      // See above\n      fields={fields}\n      // See above\n      getOperators={getOperators}\n    />\n  );\n}\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"note",children:(0,i.jsxs)(r.p,{children:["If you're using a state setter function generated by ",(0,i.jsx)(r.code,{children:"useState"})," or ",(0,i.jsx)(r.code,{children:"useReducer"}),", you don't need to memoize it. Relatedly, TypeScript no longer throws an error in version 7 if you pass the setter function directly (",(0,i.jsx)(r.code,{children:"onQueryChange={setQuery}"}),"), as long as you're not specifying generics on the query type. Version 6 and earlier required the ",(0,i.jsx)(r.code,{children:"onQueryChange"})," prop to be explicitly typed as ",(0,i.jsx)(r.code,{children:"(q: RuleGroupType) => void"}),"."]})}),"\n",(0,i.jsxs)(r.h3,{id:"option-list-value-identifiers",children:["Option list ",(0,i.jsx)(r.code,{children:"value"})," identifiers"]}),"\n",(0,i.jsxs)(r.p,{children:["In all prior versions of React Query Builder, props and properties that accepted an ",(0,i.jsx)(r.code,{children:"OptionList"})," array or extension thereof (such as ",(0,i.jsx)(r.code,{children:"fields"}),", ",(0,i.jsx)(r.code,{children:"combinators"}),", etc.) required a ",(0,i.jsx)(r.code,{children:"name"})," property as the unique identifier for each member within the list. In version 7, list members may use a ",(0,i.jsx)(r.code,{children:"value"})," property as their unique identifier instead of ",(0,i.jsx)(r.code,{children:"name"}),". If both ",(0,i.jsx)(r.code,{children:"name"})," and ",(0,i.jsx)(r.code,{children:"value"})," are present for a given item, ",(0,i.jsx)(r.code,{children:"value"})," will take precedence. This should make it easier to integrate libraries like ",(0,i.jsx)(r.a,{href:"https://react-select.com/",children:(0,i.jsx)(r.code,{children:"react-select"})})," that expect options to extend ",(0,i.jsx)(r.code,{children:"{ value: string; label: string; }"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"QueryBuilder"})," will ensure that all option list members have both ",(0,i.jsx)(r.code,{children:"name"})," ",(0,i.jsx)(r.em,{children:"and"})," ",(0,i.jsx)(r.code,{children:"value"})," properties, and will make them equivalent if only one is provided. Therefore, all subcomponents can assume both properties will be present in their option list props."]}),"\n",(0,i.jsx)(r.admonition,{type:"info",children:(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"Field"}),", ",(0,i.jsx)(r.code,{children:"Combinator"}),", and ",(0,i.jsx)(r.code,{children:"Operator"})," interfaces, which extend ",(0,i.jsx)(r.code,{children:"Option"}),", still require a ",(0,i.jsx)(r.code,{children:"name"})," property when used directly. You can use the ",(0,i.jsx)(r.code,{children:"FlexibleOption"})," type instead to avoid the ",(0,i.jsx)(r.code,{children:"name"})," property requirement, but you will lose intellisense for the additional properties of the more specific types."]})}),"\n",(0,i.jsxs)(r.p,{children:["Field identifier types (",(0,i.jsx)(r.code,{children:"name"}),"/",(0,i.jsx)(r.code,{children:"value"})," properties) will now be inferred from the ",(0,i.jsx)(r.code,{children:"fields"})," prop if they have been narrowed from ",(0,i.jsx)(r.code,{children:"string"}),". These narrowed types will be applied to subcomponents and other props that take fields or field identifiers as arguments/props. For example, if the ",(0,i.jsx)(r.code,{children:"fields"})," prop is type ",(0,i.jsx)(r.code,{children:"Field<MyFields>[]"}),", then the ",(0,i.jsx)(r.code,{children:"fieldSelector"})," property of the ",(0,i.jsx)(r.code,{children:"controlElements"})," prop will be inferred as ",(0,i.jsx)(r.code,{children:"ComponentType<FieldSelectorProps<FullField<MyFields>>>"})," instead of the default ",(0,i.jsx)(r.code,{children:"ComponentType<FieldSelectorProps<FullField<string>>>"}),". This allows subcomponents themselves to be defined with narrowed identifier types without TypeScript complaining about ",(0,i.jsx)(r.code,{children:"string"})," not being assignable to the narrowed type."]}),"\n",(0,i.jsx)(r.p,{children:"Below is an example of a custom value editor with a narrowed field identifier type:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"type MyFields = 'firstName' | 'lastName' | 'birthDate';\nconst fields: Field<MyFields>[] = [\n  { name: 'firstName', label: 'First Name' },\n  { name: 'lastName', label: 'Last Name' },\n  { name: 'birthDate', label: 'Birth Date' },\n];\nfunction MyValueEditor(props: ValueEditorProps<FullField<MyFields>>) {\n  if (props.field === 'invalid') {\n    // ^ TypeScript error: `MyFields` and `invalid` have no overlap\n    return null;\n  }\n  return <ValueEditor {...props} />;\n}\nfunction App() {\n  return (\n    <QueryBuilder\n      // Narrowed field identifier type inferred here:\n      fields={fields}\n      // No TypeScript error here, even though MyValueEditor\n      // has a narrowed field identifier type.\n      controlElements={{ valueEditor: MyValueEditor }}\n    />\n  );\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"bulk-override-action-elements-value-selectors",children:"Bulk override action elements, value selectors"}),"\n",(0,i.jsxs)(r.p,{children:['Two "bulk override" properties have been added to the ',(0,i.jsx)(r.a,{href:"./components/querybuilder#controlelements",children:(0,i.jsx)(r.code,{children:"controlElements"})})," prop: ",(0,i.jsx)(r.a,{href:"./components/querybuilder#actionelement",children:(0,i.jsx)(r.code,{children:"actionElement"})})," and ",(0,i.jsx)(r.a,{href:"./components/querybuilder#valueselector",children:(0,i.jsx)(r.code,{children:"valueSelector"})}),". When ",(0,i.jsx)(r.code,{children:"actionElement"})," is defined, it will be used for every component that defaults to ",(0,i.jsx)(r.a,{href:"./components/actionelement",children:(0,i.jsx)(r.code,{children:"ActionElement"})}),". The same is true for ",(0,i.jsx)(r.code,{children:"valueSelector"})," and components that default to ",(0,i.jsx)(r.a,{href:"./components/valueselector",children:(0,i.jsx)(r.code,{children:"ValueSelector"})}),", including ",(0,i.jsx)(r.a,{href:"./components/valueeditor",children:(0,i.jsx)(r.code,{children:"ValueEditor"})})," in cases where it renders a value selector. This makes it possible to define custom components for all buttons and all selectors at once instead of one-by-one. Assignments to the more specific ",(0,i.jsx)(r.code,{children:"controlElements"})," properties will take precedence over the bulk overrides."]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.th,{children:[(0,i.jsx)(r.code,{children:"controlElements"})," property"]}),(0,i.jsx)(r.th,{children:"Sets default for"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"valueSelector"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"combinatorSelector"}),", ",(0,i.jsx)(r.code,{children:"fieldSelector"}),", ",(0,i.jsx)(r.code,{children:"operatorSelector"}),", ",(0,i.jsx)(r.code,{children:"valueSourceSelector"}),", ",(0,i.jsx)(r.code,{children:"valueEditor"})," (when rendering a value selector)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"actionElement"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"addGroupAction"}),", ",(0,i.jsx)(r.code,{children:"addRuleAction"}),", ",(0,i.jsx)(r.code,{children:"cloneGroupAction"}),", ",(0,i.jsx)(r.code,{children:"cloneRuleAction"}),", ",(0,i.jsx)(r.code,{children:"lockGroupAction"}),", ",(0,i.jsx)(r.code,{children:"lockRuleAction"}),", ",(0,i.jsx)(r.code,{children:"removeGroupAction"}),", ",(0,i.jsx)(r.code,{children:"removeRuleAction"})]})]})]})]}),"\n",(0,i.jsxs)(r.p,{children:["These same two properties have also been added to the ",(0,i.jsx)(r.code,{children:"controlClassnames"})," prop, but they add to, not replace, classnames declared for specific components."]}),"\n",(0,i.jsx)(r.h3,{id:"query-selector-getter-and-dispatcher",children:"Query selector, getter, and dispatcher"}),"\n",(0,i.jsx)(r.admonition,{title:"TL;DR",type:"tip",children:(0,i.jsxs)(r.p,{children:["Passing the query object to subcomponents using the ",(0,i.jsx)(r.code,{children:"context"})," prop is no longer necessary or recommended."]})}),"\n",(0,i.jsxs)(r.p,{children:["Three new methods are available that should make it easier to manage arbitrary query updates from custom components. The first two methods are available on the ",(0,i.jsx)(r.code,{children:"schema"})," prop which is passed to every component, and should only be used in event handlers. The third is a React Hook and should follow the ",(0,i.jsx)(r.a,{href:"https://react.dev/warnings/invalid-hook-call-warning",children:"appropriate rules"}),"."]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Method"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"props.schema.getQuery()"})}),(0,i.jsx)(r.td,{children:"Returns the current root query object. Use only in event handlers."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"props.schema.dispatchQuery(query)"})}),(0,i.jsxs)(r.td,{children:["Updates the internal query state and calls the ",(0,i.jsx)(r.code,{children:"onQueryChange"})," callback. Use only in event handlers."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"useQueryBuilderSelector(selector)"})}),(0,i.jsxs)(r.td,{children:["React Hook that returns the current root query object. Generate the selector with ",(0,i.jsx)(r.code,{children:"getQuerySelectorById(props.schema.qbId)"}),"."]})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Notes:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["These functions all use a custom ",(0,i.jsx)(r.a,{href:"https://redux.js.org/",children:"Redux"}),' context behind the scenes, hence the "selector" nomenclature.']}),"\n",(0,i.jsxs)(r.li,{children:["Previously, updates that couldn't be performed with ",(0,i.jsx)(r.code,{children:"handleOnChange"})," or ",(0,i.jsx)(r.code,{children:"handleOnClick"})," event handlers had to use external state management in conjunction with the ",(0,i.jsx)(r.a,{href:"./utils/misc#add",children:(0,i.jsx)(r.code,{children:"add"})}),"/",(0,i.jsx)(r.a,{href:"./utils/misc#update",children:(0,i.jsx)(r.code,{children:"update"})}),"/",(0,i.jsx)(r.a,{href:"./utils/misc#remove",children:(0,i.jsx)(r.code,{children:"remove"})})," utilities. To support this, we recommended including the query object as a property of the ",(0,i.jsx)(r.code,{children:"context"})," prop. That workaround is no longer necessary or recommended."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"standalone-layout-stylesheet",children:"Standalone layout stylesheet"}),"\n",(0,i.jsxs)(r.p,{children:["Default layout styles (flex direction, alignment, spacing, etc.) are now available as a standalone stylesheet ",(0,i.jsx)(r.code,{children:"query-builder-layout.css"}),"/",(0,i.jsx)(r.code,{children:".scss"}),". The default stylesheet, ",(0,i.jsx)(r.code,{children:"query-builder.css"}),"/",(0,i.jsx)(r.code,{children:".scss"}),", contains the layout styles along with the more decorative styles like colors and border styles. The effective styles\u2014both layout and decorative\u2014of the default stylesheet have not changed from version 6."]}),"\n",(0,i.jsxs)(r.h3,{id:"field-data-passed-to-get-callbacks",children:["Field data passed to ",(0,i.jsx)(r.code,{children:"get*"})," callbacks"]}),"\n",(0,i.jsxs)(r.p,{children:["Most of the ",(0,i.jsx)(r.code,{children:"get*"}),' callback props now receive an additional "meta" parameter with a ',(0,i.jsx)(r.code,{children:"fieldData"}),' property (more properties may be added to the "meta" object in the future). ',(0,i.jsx)(r.code,{children:"fieldData"})," is the full ",(0,i.jsx)(r.code,{children:"Field"})," object from the ",(0,i.jsx)(r.code,{children:"fields"})," array for the given ",(0,i.jsx)(r.code,{children:"field"})," name, including any custom properties like ",(0,i.jsx)(r.code,{children:"datatype"}),". This eliminates the need to search for the field object based solely on the field's ",(0,i.jsx)(r.code,{children:"name"}),". Instead of something like ",(0,i.jsx)(r.code,{children:"fields.find(f => f.name === field)"}),", you can retrieve ",(0,i.jsx)(r.code,{children:"fieldData"})," from the last parameter."]}),"\n",(0,i.jsxs)(r.p,{children:['The following callback props provide the new "meta" parameter: ',(0,i.jsx)(r.code,{children:"getDefaultOperator"}),", ",(0,i.jsx)(r.code,{children:"getDefaultValue"}),", ",(0,i.jsx)(r.code,{children:"getInputType"}),", ",(0,i.jsx)(r.code,{children:"getOperators"}),", ",(0,i.jsx)(r.code,{children:"getRuleClassname"}),", ",(0,i.jsx)(r.code,{children:"getValueEditorSeparator"}),", ",(0,i.jsx)(r.code,{children:"getValueEditorType"}),", ",(0,i.jsx)(r.code,{children:"getValues"}),", and ",(0,i.jsx)(r.code,{children:"getValueSources"}),"."]}),"\n",(0,i.jsxs)(r.h3,{id:"field-data-passed-to-formatquery-rule-processors",children:["Field data passed to ",(0,i.jsx)(r.code,{children:"formatQuery"})," rule processors"]}),"\n",(0,i.jsxs)(r.p,{children:["Custom rule processors for ",(0,i.jsx)(r.code,{children:"formatQuery"})," now receive the full ",(0,i.jsx)(r.code,{children:"Field"})," object in the options parameter, as long as a ",(0,i.jsx)(r.code,{children:"fields"})," array is provided alongside ",(0,i.jsx)(r.code,{children:"ruleProcessor"}),". In TypeScript, the member type of the ",(0,i.jsx)(r.code,{children:"fields"})," array now requires a ",(0,i.jsx)(r.code,{children:"label: string"})," property (just like ",(0,i.jsx)(r.code,{children:"QueryBuilder"}),"'s ",(0,i.jsx)(r.code,{children:"fields"})," prop). Previously, only ",(0,i.jsx)(r.code,{children:"name"})," was required."]}),"\n",(0,i.jsxs)(r.h3,{id:"simpler-postgresql-compatibility-for-formatquery",children:["Simpler PostgreSQL compatibility for ",(0,i.jsx)(r.code,{children:"formatQuery"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"formatQuery"})," can natively generate ",(0,i.jsx)(r.a,{href:"https://www.postgresql.org/",children:"PostgreSQL"}),"-compatible parameterized SQL using the new ",(0,i.jsx)(r.code,{children:"numberedParams"})," option in conjunction with ",(0,i.jsx)(r.code,{children:'paramPrefix: "$"'}),'. Previously, PostgreSQL compatibility required manually post-processing the generated SQL to replace the "?" placeholders with a sequential series of numbers preceded by "$".']}),"\n",(0,i.jsx)(r.h3,{id:"shift-actions",children:"Shift actions"}),"\n",(0,i.jsxs)(r.p,{children:["A new ",(0,i.jsx)(r.a,{href:"./components/querybuilder#showshiftactions",children:(0,i.jsx)(r.code,{children:"showShiftActions"})})," prop provides first class support for rearranging rules within a query without enabling drag-and-drop. When ",(0,i.jsx)(r.code,{children:"showShiftActions"})," is ",(0,i.jsx)(r.code,{children:"true"}),", two buttons will appear at the front of each rule and group (except the root group), stacked vertically by default. The first/upper button will shift the rule or group one spot higher, while the second/lower button will shift it one spot lower. Pressing the modifier key (",(0,i.jsx)(r.code,{children:"Alt"})," on Windows/Linux, ",(0,i.jsx)(r.code,{children:"Option"}),"/",(0,i.jsx)(r.code,{children:"\u2325"})," on Mac) while clicking will clone the rule/group instead of just moving it."]}),"\n",(0,i.jsx)(r.p,{children:"Related additions:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"./components/shiftactions",children:(0,i.jsx)(r.code,{children:"ShiftActions"})}),' component (with a corresponding component in each compatibility package) that renders "shift up" and "shift down" action buttons. The default styles remove the border and background from these buttons, leaving only the ',(0,i.jsx)(r.code,{children:"shiftActionUp.label"}),"/",(0,i.jsx)(r.code,{children:"shiftActionDown.label"})," translation properties visible."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"./utils/hooks#useshiftactions",children:(0,i.jsx)(r.code,{children:"useShiftActions"})})," hook, called by the ",(0,i.jsx)(r.code,{children:"ShiftActions"})," component, returns ",(0,i.jsx)(r.code,{children:"shiftUp"}),"/",(0,i.jsx)(r.code,{children:"shiftDown"}),' methods and determines whether either button should be disabled. (Within the root group, "shift up" is disabled for the very first rule or group and "shift down" is disabled for the very last rule or group).']}),"\n",(0,i.jsxs)(r.li,{children:["New properties on the ",(0,i.jsx)(r.a,{href:"./components/querybuilder#translations",children:(0,i.jsx)(r.code,{children:"translations"})})," prop: ",(0,i.jsx)(r.code,{children:"shiftActionUp"})," and ",(0,i.jsx)(r.code,{children:"shiftActionDown"}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsxs)(r.p,{children:["Accessibility is improved with the addition of a ",(0,i.jsx)(r.code,{children:"title"})," attribute to the outermost ",(0,i.jsx)(r.code,{children:"<div>"})," of each rule group. The text of this attribute can be customized with the ",(0,i.jsx)(r.code,{children:"accessibleDescriptionGenerator"})," function prop. The default implementation is exported as ",(0,i.jsx)(r.a,{href:"https://github.com/react-querybuilder/react-querybuilder/blob/main/packages/react-querybuilder/src/utils/generateAccessibleDescription.ts",children:"generateAccessibleDescription"}),"."]}),"\n",(0,i.jsxs)(r.h3,{id:"drag-and-drop-candrop-callback",children:["Drag-and-drop ",(0,i.jsx)(r.code,{children:"canDrop"})," callback"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"<QueryBuilderDnD />"})," and ",(0,i.jsx)(r.code,{children:"<QueryBuilderDndWithoutProvider />"})," from ",(0,i.jsx)(r.code,{children:"@react-querybuilder/dnd"})," now accept a ",(0,i.jsx)(r.code,{children:"canDrop"})," callback prop. If provided, the function will be called when dragging a rule or group. The only parameter will be an object containing ",(0,i.jsx)(r.code,{children:"dragging"})," and ",(0,i.jsx)(r.code,{children:"hovering"})," properties, representing the rule/group being dragged and the rule/group over which it is hovered, respectively. The objects will also contain the ",(0,i.jsx)(r.code,{children:"path"})," of each item. If ",(0,i.jsx)(r.code,{children:"canDrop"})," returns ",(0,i.jsx)(r.code,{children:"false"}),", dropping the item at its current position will have no effect on the query. Otherwise the normal drag-and-drop rules will apply."]}),"\n",(0,i.jsxs)(r.h3,{id:"enhanced-parsenumber-behavior",children:["Enhanced ",(0,i.jsx)(r.code,{children:"parseNumber"})," behavior"]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"parseNumber"})," function now delegates parsing to ",(0,i.jsx)(r.a,{href:"https://www.npmjs.com/package/numeric-quantity",children:(0,i.jsx)(r.code,{children:"numeric-quantity"})}),", which is essentially an enhanced version of ",(0,i.jsx)(r.code,{children:"parseFloat"}),'. The default behavior has not changed, but a new "enhanced" option will ignore trailing invalid characters (e.g., the "abc" in "123abc"). This matches the behavior of the "native" option, which uses ',(0,i.jsx)(r.code,{children:"parseFloat"})," directly, except it returns the original string when parsing fails instead of ",(0,i.jsx)(r.code,{children:"NaN"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"spel-parser",children:"SpEL parser"}),"\n",(0,i.jsxs)(r.p,{children:["The new ",(0,i.jsx)(r.code,{children:"parseSpEL"})," function converts ",(0,i.jsx)(r.a,{href:"https://docs.spring.io/spring-framework/docs/3.0.x/reference/expressions.html",children:"SpEL"})," expressions to React Query Builder query objects."]}),"\n",(0,i.jsx)(r.h2,{id:"updated-default-labels",children:"Updated default labels"}),"\n",(0,i.jsx)(r.h3,{id:"main-package",children:"Main package"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Key"}),(0,i.jsx)(r.th,{children:"Old"}),(0,i.jsx)(r.th,{children:"New"}),(0,i.jsx)(r.th,{children:"Notes"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.addRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"+Rule"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"+ Rule"'})}),(0,i.jsx)(r.td,{children:'Space added between "+" and "Rule"'})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.addGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"+Group"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"+ Group"'})}),(0,i.jsx)(r.td,{children:'Space added between "+" and "Group"'})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"x"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"\u2a2f"'})}),(0,i.jsxs)(r.td,{children:["HTML entity ",(0,i.jsx)(r.code,{children:"&cross;"})," / ",(0,i.jsx)(r.code,{children:"&#x2A2F;"})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"x"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'"\u2a2f"'})}),(0,i.jsxs)(r.td,{children:["HTML entity ",(0,i.jsx)(r.code,{children:"&cross;"})," / ",(0,i.jsx)(r.code,{children:"&#x2A2F;"})]})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"compatibility-packages",children:"Compatibility packages"}),"\n",(0,i.jsxs)(r.p,{children:["Several compatibility packages take advantage of the new ability to use a ",(0,i.jsx)(r.code,{children:"ReactNode"})," as a ",(0,i.jsx)(r.code,{children:"label"})," (previously only ",(0,i.jsx)(r.code,{children:"string"}),"s were allowed). These packages override the default ",(0,i.jsx)(r.code,{children:"label"})," for non-text components (",(0,i.jsx)(r.code,{children:"lock*"}),", ",(0,i.jsx)(r.code,{children:"clone*"}),", ",(0,i.jsx)(r.code,{children:"remove*"}),", and ",(0,i.jsx)(r.code,{children:"dragHandle"}),") with SVG icons from their official icon packages. This brings them more in line with their respective design systems by default. Set ",(0,i.jsx)(r.code,{children:"translations={defaultTranslations}"})," to avoid the SVG icons."]}),"\n",(0,i.jsxs)(r.h4,{id:"ant-design-react-querybuilderantd",children:["Ant Design (",(0,i.jsx)(r.code,{children:"@react-querybuilder/antd"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:["Icon package: ",(0,i.jsx)(r.a,{href:"https://npmjs.com/package/@ant-design/icons",children:(0,i.jsx)(r.code,{children:"@ant-design/icons"})})]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Key"}),(0,i.jsx)(r.th,{children:"Icon"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CloseOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CloseOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CopyOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRuleGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CopyOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<UnlockOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<UnlockOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroupDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRuleDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionUp.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<UpOutlined />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionDown.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<DownOutlined />"})})]})]})]}),"\n",(0,i.jsxs)(r.h4,{id:"bootstrap-react-querybuilderbootstrap",children:["Bootstrap (",(0,i.jsx)(r.code,{children:"@react-querybuilder/bootstrap"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:["Icon package: ",(0,i.jsx)(r.a,{href:"https://npmjs.com/package/bootstrap-icons",children:(0,i.jsx)(r.code,{children:"bootstrap-icons"})})]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsxs)(r.em,{children:["Note: The ",(0,i.jsx)(r.code,{children:"BootstrapDragHandle"})," component has been removed. It is unnecessary now that the default drag handle component can accept a ",(0,i.jsx)(r.code,{children:"ReactNode"})," as its ",(0,i.jsx)(r.code,{children:"label"}),"."]})}),"\n"]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Key"}),(0,i.jsx)(r.th,{children:"Icon"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-x" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-x" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-copy" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRuleGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-copy" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.dragHandle.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-grip-vertical" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-unlock" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-unlock" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroupDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-lock" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRuleDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-lock" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionUp.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-chevron-compact-up" />'})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionDown.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'<i className="bi bi-chevron-compact-down" />'})})]})]})]}),"\n",(0,i.jsxs)(r.h4,{id:"chakra-ui-react-querybuilderchakra",children:["Chakra UI (",(0,i.jsx)(r.code,{children:"@react-querybuilder/chakra"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:["Icon package: ",(0,i.jsx)(r.a,{href:"https://npmjs.com/package/@chakra-ui/icons",children:(0,i.jsx)(r.code,{children:"@chakra-ui/icons"})})]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Key"}),(0,i.jsx)(r.th,{children:"Icon"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CloseIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CloseIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRuleGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CopyIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CopyIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<UnlockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<UnlockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroupDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRuleDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionDown.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ChevronDownIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionUp.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ChevronUpIcon />"})})]})]})]}),"\n",(0,i.jsxs)(r.h4,{id:"fluent-ui-react-querybuilderfluent",children:["Fluent UI (",(0,i.jsx)(r.code,{children:"@react-querybuilder/fluent"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:["Icon package: ",(0,i.jsx)(r.a,{href:"https://npmjs.com/package/@fluentui/react-icons-mdl2",children:(0,i.jsx)(r.code,{children:"@fluentui/react-icons-mdl2"})})]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Key"}),(0,i.jsx)(r.th,{children:"Icon"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CancelIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<CancelIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<DuplicateRowIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRuleGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<DuplicateRowIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.dragHandle.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<GripperDotsVerticalIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<UnlockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<UnlockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroupDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRuleDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionDown.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ChevronDownIcon />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionUp.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ChevronUpIcon />"})})]})]})]}),"\n",(0,i.jsxs)(r.h4,{id:"muimaterial-react-querybuildermaterial",children:["MUI/Material (",(0,i.jsx)(r.code,{children:"@react-querybuilder/material"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:["Icon package: ",(0,i.jsx)(r.a,{href:"https://npmjs.com/package/@mui/icons-material",children:(0,i.jsx)(r.code,{children:"@mui/icons-material"})})]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Key"}),(0,i.jsx)(r.th,{children:"Icon"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<Close />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.removeRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<Close />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ContentCopy />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.cloneRuleGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ContentCopy />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroup.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockOpen />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRule.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<LockOpen />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockGroupDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<Lock />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.lockRuleDisabled.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<Lock />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionDown.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ShiftDown />"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"translations.shiftActionUp.label"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<ShiftUp />"})})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>t});var i=n(63696);const s={},l=i.createContext(s);function d(e){const r=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(l.Provider,{value:r},e.children)}}}]);