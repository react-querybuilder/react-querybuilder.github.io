"use strict";(self.webpackChunkreact_querybuilder_github_io=self.webpackChunkreact_querybuilder_github_io||[]).push([[377],{7760:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return l},default:function(){return y}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],s={title:"TypeScript",sidebar_position:9},u=void 0,p={unversionedId:"typescript",id:"typescript",isDocsHomePage:!1,title:"TypeScript",description:"These are some of the TypeScript types and interfaces you'll see throughout the documentation. Even if you are not using TypeScript (you really should! \ud83d\ude0a), you can use the information below to understand the required shape of the props and function parameters. To see the full type definitions for the react-querybuilder library, click here.",source:"@site/docs/typescript.md",sourceDirName:".",slug:"/typescript",permalink:"/docs/typescript",editUrl:"https://github.com/react-querybuilder/react-querybuilder.github.io/blob/main/docs/docs/typescript.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"TypeScript",sidebar_position:9},sidebar:"mySidebar",previous:{title:"Miscellaneous",permalink:"/docs/api/misc"}},l=[],c={toc:l};function y(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"These are some of the ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript")," types and interfaces you'll see throughout the documentation. Even if you are not using TypeScript (you really should! \ud83d\ude0a), you can use the information below to understand the required shape of the props and function parameters. To see the full type definitions for the ",(0,a.kt)("inlineCode",{parentName:"p"},"react-querybuilder")," library, ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/react-querybuilder/react-querybuilder/blob/master/src/types.ts"},"click here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface NameLabelPair {\n  name: string;\n  label: string;\n  [x: string]: any;\n}\n\ninterface ValidationResult {\n  valid: boolean;\n  reasons?: any[];\n}\n\ninterface ValidationMap {\n  [id: string]: boolean | ValidationResult;\n}\n\ntype QueryValidator = (query: RuleGroupTypeAny) => boolean | ValidationMap;\n\ntype RuleValidator = (rule: RuleType) => boolean | ValidationResult;\n\ninterface RuleType {\n  path?: number[];\n  id?: string;\n  field: string;\n  operator: string;\n  value: any;\n}\n\ninterface RuleGroupType {\n  path?: number[];\n  id?: string;\n  combinator: string;\n  rules: (RuleType | RuleGroupType)[];\n  not?: boolean;\n}\n\ninterface RuleGroupTypeIC {\n  path?: number[];\n  id?: string;\n  rules: (RuleType | RuleGroupTypeIC | string)[];\n  not?: boolean;\n}\n\ntype RuleGroupTypeAny = RuleGroupType | RuleGroupTypeIC;\n\ntype RuleOrGroupArray =\n  | (RuleType | RuleGroupType)[]\n  | (RuleType | RuleGroupTypeIC | string)[];\n\ntype ExportFormat =\n  | 'json'\n  | 'sql'\n  | 'json_without_ids'\n  | 'parameterized'\n  | 'parameterized_named'\n  | 'mongodb';\n\ntype ValueProcessor = (field: string, operator: string, value: any) => string;\n\ntype ValueEditorType = 'text' | 'select' | 'checkbox' | 'radio' | null;\n\ninterface FormatQueryOptions {\n  format?: ExportFormat;\n  valueProcessor?: ValueProcessor;\n  quoteFieldNamesWith?: string;\n  validator?: QueryValidator;\n  fields?: { name: string; validator?: RuleValidator; [k: string]: any }[];\n  fallbackExpression?: string;\n  paramPrefix?: string;\n}\n\ninterface ParameterizedSQL {\n  sql: string;\n  params: any[];\n}\n\ninterface ParameterizedNamedSQL {\n  sql: string;\n  params: { [p: string]: any };\n}\n\ninterface ParseSQLOptions {\n  inlineCombinators?: boolean;\n  paramPrefix?: string;\n  params?: any[] | { [p: string]: any };\n}\n")))}y.isMDXComponent=!0}}]);