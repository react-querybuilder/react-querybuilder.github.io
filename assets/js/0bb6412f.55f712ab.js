"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8126],{13478:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=t(24246),a=t(71670);const s={title:"Custom bind variables",description:"Altering the SQL for certain RDBMS's",hide_table_of_contents:!0},i=void 0,o={id:"tips/custom-bind-variables",title:"Custom bind variables",description:"Altering the SQL for certain RDBMS's",source:"@site/versioned_docs/version-4/tips/custom-bind-variables.mdx",sourceDirName:"tips",slug:"/tips/custom-bind-variables",permalink:"/docs/4/tips/custom-bind-variables",draft:!1,unlisted:!1,editUrl:"https://github.com/react-querybuilder/react-querybuilder/edit/main/website/versioned_docs/version-4/tips/custom-bind-variables.mdx",tags:[],version:"4",frontMatter:{title:"Custom bind variables",description:"Altering the SQL for certain RDBMS's",hide_table_of_contents:!0},sidebar:"mySidebar",previous:{title:"External controls",permalink:"/docs/4/tips/external-controls"},next:{title:"Adding and removing query properties",permalink:"/docs/4/tips/adding-removing-query-properties"}},l={},c=[];function d(e){const r=Object.assign({p:"p",code:"code",a:"a",em:"em",pre:"pre"},(0,a.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["Different SQL flavors have different requirements for bind variable placeholders. Some use a simple ",(0,n.jsx)(r.code,{children:"?"})," character (which is what ",(0,n.jsx)(r.code,{children:"formatQuery(query, 'parameterized')"})," produces by default), and others require a bind variable placeholder to start with ",(0,n.jsx)(r.code,{children:"$"})," and be followed by a unique string."]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.a,{href:"../api/export#named-parameters",children:'"parameterized_named" export format'})," will usually be sufficient to cover the latter case. But if the default parameter names (e.g. ",(0,n.jsx)(r.code,{children:":fieldName_1"}),') are not acceptable, you can use the "parameterized" format and replace the "?" with your choice of name.']}),"\n",(0,n.jsxs)(r.p,{children:['The following code will produce a SQL string with each bind variable placeholder being numbered from "$1" to "$',(0,n.jsx)(r.em,{children:"n"}),'", where ',(0,n.jsx)(r.em,{children:"n"})," is the number of bind variables (also, appropriately, the number of elements in the ",(0,n.jsx)(r.code,{children:"params"})," array)."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"let i = 0;\nconst { sql, params } = formatQuery(query, 'parameterized');\nconst numberedParams = {\n  params,\n  sql: sql.replaceAll('?', () => {\n    i++;\n    return `$${i}`;\n  }),\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["For example, if ",(0,n.jsx)(r.code,{children:'formatQuery(query, "parameterized")'})," produced the following object:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-json",children:'{\n  "sql": "(firstName = ? and lastName = ?)",\n  "params": ["Steve", "Vai"]\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["...then the code above would assign the following object to the ",(0,n.jsx)(r.code,{children:"numberedParams"})," variable:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-json",children:'{\n  "sql": "(firstName = $1 and lastName = $2)",\n  "params": ["Steve", "Vai"]\n}\n'})})]})}const m=function(e={}){const{wrapper:r}=Object.assign({},(0,a.a)(),e.components);return r?(0,n.jsx)(r,Object.assign({},e,{children:(0,n.jsx)(d,e)})):d(e)}},71670:(e,r,t)=>{t.d(r,{a:()=>i});var n=t(27378);const a={},s=n.createContext(a);function i(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}}}]);