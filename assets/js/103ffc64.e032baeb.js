"use strict";(self.webpackChunkreact_querybuilder_github_io=self.webpackChunkreact_querybuilder_github_io||[]).push([[69],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9769:function(e,t,n){n.d(t,{ZP:function(){return s}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={toc:[]};function s(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"../typescript"},"TypeScript")," page for information about the types and interfaces referenced below."))))}s.isMDXComponent=!0},6186:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=n(9769),p=["components"],s={title:"Import"},l=void 0,u={unversionedId:"api/import",id:"api/import",title:"Import",description:"Use the parseSQL function to convert SQL SELECT statements into a format suitable for the ` component's query` prop. The function signature is:",source:"@site/docs/api/import.md",sourceDirName:"api",slug:"/api/import",permalink:"/docs/api/import",editUrl:"https://github.com/react-querybuilder/react-querybuilder.github.io/edit/main/docs/api/import.md",tags:[],version:"current",frontMatter:{title:"Import"},sidebar:"mySidebar",previous:{title:"Export",permalink:"/docs/api/export"},next:{title:"Validation",permalink:"/docs/api/validation"}},c=[{value:"Basic usage",id:"basic-usage",children:[{value:"Lists as arrays",id:"lists-as-arrays",children:[],level:3}],level:2},{value:"Independent combinators",id:"independent-combinators",children:[],level:2}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,p);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.ZP,{mdxType:"TypeScriptAdmonition"}),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," function to convert SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statements into a format suitable for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," component's ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," prop. The function signature is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function parseSQL(sql: string, options?: ParseSQLOptions): RuleGroupTypeAny;\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," takes a SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement (either the full statement or the ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE")," clause by itself). Try it out in the ",(0,i.kt)("a",{parentName:"p",href:"https://react-querybuilder.github.io/react-querybuilder/"},"demo"),' by clicking the "Load from SQL" button.'),(0,i.kt)("p",null,"The optional second parameter to ",(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," is an options object that configures how the function handles named or anonymous bind variables within the SQL string."),(0,i.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,i.kt)("p",null,"Running any of the following statements will produce the same result (see below):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"parseSQL(`SELECT * FROM t WHERE firstName = 'Steve' AND lastName = 'Vai'`);\n\nparseSQL(`SELECT * FROM t WHERE firstName = ? AND lastName = ?`, {\n  params: ['Steve', 'Vai']\n});\n\nparseSQL(`SELECT * FROM t WHERE firstName = :p1 AND lastName = :p2`, {\n  params: { p1: 'Steve', p2: 'Vai' }\n});\n\nparseSQL(`SELECT * FROM t WHERE firstName = $p1 AND lastName = $p2`, {\n  params: { p1: 'Steve', p2: 'Vai' },\n  paramPrefix: '$'\n});\n")),(0,i.kt)("p",null,"Output (",(0,i.kt)("inlineCode",{parentName:"p"},"RuleGroupType"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  combinator: "and",\n  rules: [\n    {\n      field: "firstName",\n      operator: "=",\n      value: "Steve"\n    },\n    {\n      field: "lastName",\n      operator: "=",\n      value: "Vai"\n    }\n  ]\n}\n')),(0,i.kt)("h3",{id:"lists-as-arrays"},"Lists as arrays"),(0,i.kt)("p",null,"To generate actual arrays instead of comma-separated strings for lists of values following ",(0,i.kt)("inlineCode",{parentName:"p"},"IN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BETWEEN")," operators, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"listsAsArrays")," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'parseSQL(`SELECT * FROM t WHERE lastName IN (\'Vai\', \'Vaughan\') AND age BETWEEN 20 AND 100`, {\n  listsAsArrays: true;\n});\n// Output:\n{\n  combinator: "and",\n  rules: [\n    {\n      field: "lastName",\n      operator: "in",\n      value: ["Vai", "Vaughan"]\n    },\n    {\n      field: "age",\n      operator: "between",\n      value: [20, 100]\n    }\n  ]\n}\n')),(0,i.kt)("h2",{id:"independent-combinators"},"Independent combinators"),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"independentCombinators")," option is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," will output a query with combinator identifiers between sibling rules/groups."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"parseSQL(\n  `SELECT * FROM t WHERE firstName = 'Steve' AND lastName = 'Vai'`,\n  { independentCombinators: true }\n);\n")),(0,i.kt)("p",null,"Output (",(0,i.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  rules: [\n    {\n      field: "firstName",\n      operator: "=",\n      value: "Steve"\n    },\n    "and",\n    {\n      field: "lastName",\n      operator: "=",\n      value: "Vai"\n    }\n  ]\n}\n')))}d.isMDXComponent=!0}}]);