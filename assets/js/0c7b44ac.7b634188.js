"use strict";(self.webpackChunkreact_querybuilder_github_io=self.webpackChunkreact_querybuilder_github_io||[]).push([[813],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,f=m["".concat(p,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9769:function(e,t,n){n.d(t,{ZP:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={toc:[]};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"../typescript"},"TypeScript")," page for information about the types and interfaces referenced below."))))}p.isMDXComponent=!0},4789:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=n(9769),l=["components"],p={title:"Import",description:"Convert SQL to query builder objects"},s=void 0,u={unversionedId:"api/import",id:"api/import",title:"Import",description:"Convert SQL to query builder objects",source:"@site/docs/api/import.mdx",sourceDirName:"api",slug:"/api/import",permalink:"/docs/api/import",editUrl:"https://github.com/react-querybuilder/react-querybuilder.github.io/edit/main/docs/api/import.mdx",tags:[],version:"current",frontMatter:{title:"Import",description:"Convert SQL to query builder objects"},sidebar:"mySidebar",previous:{title:"Export",permalink:"/docs/api/export"},next:{title:"Validation",permalink:"/docs/api/validation"}},d=[{value:"Basic usage",id:"basic-usage",children:[{value:"Lists as arrays",id:"lists-as-arrays",children:[],level:3}],level:2},{value:"Independent combinators",id:"independent-combinators",children:[],level:2},{value:"Fields as value source",id:"fields-as-value-source",children:[],level:2}],m={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.ZP,{mdxType:"TypeScriptAdmonition"}),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," function to convert SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statements into a format suitable for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<QueryBuilder />")," component's ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," prop. The function signature is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function parseSQL(sql: string, options?: ParseSQLOptions): RuleGroupTypeAny;\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," takes a SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement (either the full statement or the ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE")," clause by itself). Try it out in the ",(0,i.kt)("a",{parentName:"p",href:"https://react-querybuilder.github.io/react-querybuilder/"},"demo"),' by clicking the "Load from SQL" button.'),(0,i.kt)("p",null,"The optional second parameter to ",(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," is an options object that configures how the function handles named or anonymous bind variables within the SQL string."),(0,i.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,i.kt)("p",null,"Running any of the following statements will produce the same result (see below):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"parseSQL(`SELECT * FROM t WHERE firstName = 'Steve' AND lastName = 'Vai'`);\n\nparseSQL(`SELECT * FROM t WHERE firstName = ? AND lastName = ?`, {\n  params: ['Steve', 'Vai'],\n});\n\nparseSQL(`SELECT * FROM t WHERE firstName = :p1 AND lastName = :p2`, {\n  params: { p1: 'Steve', p2: 'Vai' },\n});\n\nparseSQL(`SELECT * FROM t WHERE firstName = $p1 AND lastName = $p2`, {\n  params: { p1: 'Steve', p2: 'Vai' },\n  paramPrefix: '$',\n});\n")),(0,i.kt)("p",null,"Output (",(0,i.kt)("inlineCode",{parentName:"p"},"RuleGroupType"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  combinator: "and",\n  rules: [\n    {\n      field: "firstName",\n      operator: "=",\n      value: "Steve"\n    },\n    {\n      field: "lastName",\n      operator: "=",\n      value: "Vai"\n    }\n  ]\n}\n')),(0,i.kt)("h3",{id:"lists-as-arrays"},"Lists as arrays"),(0,i.kt)("p",null,"To generate actual arrays instead of comma-separated strings for lists of values following ",(0,i.kt)("inlineCode",{parentName:"p"},"IN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BETWEEN")," operators, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"listsAsArrays")," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"parseSQL(`SELECT * FROM t WHERE lastName IN ('Vai', 'Vaughan') AND age BETWEEN 20 AND 100`, {\n  listsAsArrays: true;\n});\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  combinator: "and",\n  rules: [\n    {\n      field: "lastName",\n      operator: "in",\n      value: ["Vai", "Vaughan"]\n    },\n    {\n      field: "age",\n      operator: "between",\n      value: [20, 100]\n    }\n  ]\n}\n')),(0,i.kt)("h2",{id:"independent-combinators"},"Independent combinators"),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"independentCombinators")," option is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," will output a query with combinator identifiers between sibling rules/groups."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"parseSQL(`SELECT * FROM t WHERE firstName = 'Steve' AND lastName = 'Vai'`, {\n  independentCombinators: true,\n});\n")),(0,i.kt)("p",null,"Output (",(0,i.kt)("inlineCode",{parentName:"p"},"RuleGroupTypeIC"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  rules: [\n    {\n      field: 'firstName',\n      operator: '=',\n      value: 'Steve',\n    },\n    'and',\n    {\n      field: 'lastName',\n      operator: '=',\n      value: 'Vai',\n    },\n  ];\n}\n")),(0,i.kt)("h2",{id:"fields-as-value-source"},"Fields as value source"),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"fields")," option (which accepts the same types as the ",(0,i.kt)("a",{parentName:"p",href:"./querybuilder#fields"},(0,i.kt)("inlineCode",{parentName:"a"},"fields")," prop"),") is provided, and ",(0,i.kt)("em",{parentName:"p"},"only")," if it is provided, then ",(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL")," will validate clauses that have a field identifier to the right of the operator instead of a primitive value. A ",(0,i.kt)("inlineCode",{parentName:"p"},"getValueSources")," function can also be provided to help validate rules."),(0,i.kt)("p",null,"In order for such a rule to be considered valid, either the ",(0,i.kt)("inlineCode",{parentName:"p"},"getValueSources")," return value, the field's ",(0,i.kt)("inlineCode",{parentName:"p"},"valueSources")," property return value, or the field's ",(0,i.kt)("inlineCode",{parentName:"p"},"valueSources"),' property itself must be an array that includes the string "field".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"parseSQL(`SELECT * FROM t WHERE firstName = lastName`, {\n  fields: [\n    { name: 'firstName', label: 'First Name' },\n    { name: 'lastName', label: 'Last Name' },\n  ],\n  getValueSources: () => ['value', 'field'],\n});\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  combinator: "and",\n  rules: [\n    {\n      field: "firstName",\n      operator: "=",\n      value: "lastName",\n      valueSource: "field",\n    },\n  ],\n}\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"parseSQL"),' will only validate clauses where "field" is the ',(0,i.kt)("em",{parentName:"p"},"only"),' value source. Operators that take multiple values, like "between" and "in", must only have field names to the right of the operator, not a mix of field names and primitive values.'))))}c.isMDXComponent=!0}}]);