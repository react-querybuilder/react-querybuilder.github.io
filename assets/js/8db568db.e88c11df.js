"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13744],{75994:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>m,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var r=t(62540),o=t(65404),s=t(25703),i=t(50026),l=t(49852);const d={title:"Limit rule groups",description:"Methods to prevent new groups",hide_table_of_contents:!0},a=void 0,c={id:"tips/limit-groups",title:"Limit rule groups",description:"Methods to prevent new groups",source:"@site/versioned_docs/version-6/tips/limit-groups.mdx",sourceDirName:"tips",slug:"/tips/limit-groups",permalink:"/docs/6/tips/limit-groups",draft:!1,unlisted:!1,editUrl:"https://github.com/react-querybuilder/react-querybuilder/edit/main/website/versioned_docs/version-6/tips/limit-groups.mdx",tags:[],version:"6",frontMatter:{title:"Limit rule groups",description:"Methods to prevent new groups",hide_table_of_contents:!0},sidebar:"mySidebar",previous:{title:"Path concepts",permalink:"/docs/6/tips/path"},next:{title:"Custom components with fallbacks",permalink:"/docs/6/tips/custom-with-fallback"}},u={},h=[{value:"Prevent creation of new groups",id:"prevent-creation-of-new-groups",level:2},{value:"Conditionally allow new groups",id:"conditionally-allow-new-groups",level:2},{value:"Other methods",id:"other-methods",level:2}];function p(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Some query builder implementations are required to maintain a flat, rule-only hierarchy, or perhaps allow group creation only under certain conditions like one level deep. There are several ways to meet these requirements."}),"\n",(0,r.jsx)(n.h2,{id:"prevent-creation-of-new-groups",children:"Prevent creation of new groups"}),"\n",(0,r.jsxs)(n.p,{children:['The simplest way to prevent creation of new groups is to unconditionally hide the "+Group" button. Returning ',(0,r.jsx)(n.code,{children:"null"})," from a custom ",(0,r.jsx)(n.code,{children:"addGroupAction"})," function component is one way to accomplish this."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<QueryBuilder\n  fields={fields}\n  query={query}\n  onQueryChange={q => setQuery(q)}\n  controlElements={{\n    // highlight-start\n    addGroupAction: () => null,\n    // highlight-end\n  }}\n/>\n"})}),"\n",(0,r.jsxs)(n.p,{children:['To hide the "+Group" button with CSS, use the ',(0,r.jsx)(n.code,{children:"ruleGroup-addGroup"})," class which is assigned to the button by default:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:".ruleGroup-addGroup {\n  display: none;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Either of those methods will generate a query builder like this:"}),"\n",(0,r.jsx)(s.Z,{children:(0,r.jsx)(i.b,{controlElements:{addGroupAction:()=>null}})}),"\n",(0,r.jsx)(n.h2,{id:"conditionally-allow-new-groups",children:"Conditionally allow new groups"}),"\n",(0,r.jsxs)(n.p,{children:['To show the "+Group" button at the top level, but hide it in sub-groups, spread the ',(0,r.jsx)(n.code,{children:"props"})," object into the standard ",(0,r.jsx)(n.code,{children:"ActionElement"})," component and return that if the ",(0,r.jsx)(n.code,{children:"level"})," prop is zero; otherwise return ",(0,r.jsx)(n.code,{children:"null"})," as before:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<QueryBuilder\n  fields={fields}\n  query={query}\n  onQueryChange={q => setQuery(q)}\n  controlElements={{\n    // highlight-start\n    addGroupAction: props => (props.level === 0 ? <ActionElement {...props} /> : null),\n    // highlight-end\n  }}\n/>\n"})}),"\n",(0,r.jsx)(n.p,{children:"And the CSS method for the same effect:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:".ruleGroup .ruleGroup .ruleGroup-addGroup {\n  display: none;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Either of those methods will generate a query builder like this:"}),"\n",(0,r.jsx)(s.Z,{children:(0,r.jsx)(i.b,{defaultQuery:{combinator:"and",rules:[{combinator:"and",rules:[]},{combinator:"and",rules:[]}]},controlElements:{addGroupAction:e=>0===e.level?(0,r.jsx)(l.jx,{...e}):null}})}),"\n",(0,r.jsx)(n.h2,{id:"other-methods",children:"Other methods"}),"\n",(0,r.jsxs)(n.p,{children:["Another option for preventing the addition of new groups is to return ",(0,r.jsx)(n.code,{children:"false"})," from the ",(0,r.jsx)(n.code,{children:"onAddGroup"})," callback."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:'On its own, this configuration may be a little confusing to the user since they would be able to click a "+Group" button but nothing would happen. Probably best to combine this method with other information and behaviors that would help the user understand what\'s going on.'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<QueryBuilder\n  fields={fields}\n  query={query}\n  onQueryChange={q => setQuery(q)}\n  // highlight-start\n  onAddGroup={() => false}\n  // highlight-end\n/>\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},25703:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(62540),o=t(11750);const s="browserWindow_my1Q",i="browserWindowHeader_jXSR",l="buttons_uHc7",d="browserWindowAddressBar_Pd8y",a="dot_giz1",c="browserWindowMenuIcon_Vhuh",u="bar_rrRL",h="browserWindowBody_Idgs",p=({children:e,minHeight:n,url:t="https://example.com"})=>(0,r.jsxs)("div",{className:s,style:{minHeight:n},children:[(0,r.jsxs)("div",{className:i,children:[(0,r.jsxs)("div",{className:l,children:[(0,r.jsx)("span",{className:a,style:{background:"#f25f58"}}),(0,r.jsx)("span",{className:a,style:{background:"#fbbe3c"}}),(0,r.jsx)("span",{className:a,style:{background:"#58cb42"}})]}),(0,r.jsx)("div",{className:(0,o.A)(d,"text--truncate"),children:t}),(0,r.jsx)("div",{className:c,children:(0,r.jsxs)("div",{children:[(0,r.jsx)("span",{className:u}),(0,r.jsx)("span",{className:u}),(0,r.jsx)("span",{className:u})]})})]}),(0,r.jsx)("div",{className:h,children:e})]})},50026:(e,n,t)=>{t.d(n,{b:()=>l});var r=t(62540),o=t(49852);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){s(e,n,t[n])}))}return e}const l=e=>{const n=o.oS;var t;return(0,r.jsx)("div",{className:"queryBuilderEmbed",children:(0,r.jsx)(n,i({},e))},`v${null!==(t=e.version)&&void 0!==t?t:6}`)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(63696);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);