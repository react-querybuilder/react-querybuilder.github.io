"use strict";(self.webpackChunkreact_querybuilder_github_io=self.webpackChunkreact_querybuilder_github_io||[]).push([[206],{5397:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return h}});var n=r(7462),a=r(3366),i=r(7294),o=r(3905),l=r(7219),u=r(5350),s=function(e){var t=e.children,r=(0,u.Z)().isDarkTheme,n=i.Children.toArray(t)[0].props.children.props.children,a=r?"#343a46":"white";return i.createElement("div",{className:"sandpackrqb"},i.createElement(l.xR,{files:{"/src/App.tsx":n,"/src/styles.css":{code:"body{background-color:"+a+";}",hidden:!0}},theme:r?"monokai-pro":void 0,template:"react-ts",customSetup:{dependencies:{"react-querybuilder":"4.0.0-beta.7"}}}))},d=["components"],p={title:"Getting Started",hide_table_of_contents:!0},c=void 0,m={unversionedId:"intro",id:"intro",title:"Getting Started",description:"To install react-querybuilder, use npm or Yarn.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",editUrl:"https://github.com/react-querybuilder/react-querybuilder.github.io/edit/main/docs/intro.mdx",tags:[],version:"current",frontMatter:{title:"Getting Started",hide_table_of_contents:!0},sidebar:"mySidebar",next:{title:"API",permalink:"/docs/category/api"}},h=[{value:"Basics",id:"basics",children:[],level:2},{value:"Onward and upward!",id:"onward-and-upward",children:[],level:2},{value:"Training",id:"training",children:[],level:2}],y={toc:h};function b(e){var t=e.components,r=(0,a.Z)(e,d);return(0,o.kt)("wrapper",(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To install ",(0,o.kt)("inlineCode",{parentName:"p"},"react-querybuilder"),", use ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/react-querybuilder"},"npm")," or ",(0,o.kt)("a",{parentName:"p",href:"https://yarnpkg.com/package/react-querybuilder"},"Yarn"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm i react-querybuilder\n")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Yarn\nyarn add react-querybuilder\n")),(0,o.kt)("h2",{id:"basics"},"Basics"),(0,o.kt)("p",null,"The simplest way to create a query builder is to render the ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," component with no props. (Be sure to import the official stylesheet, which is available in ",(0,o.kt)("inlineCode",{parentName:"p"},".css")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".scss")," flavors.)"),(0,o.kt)(s,{mdxType:"SandpackRQB"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import QueryBuilder from "react-querybuilder";\nimport "react-querybuilder/dist/query-builder.scss";\n\nexport default () => <QueryBuilder />;\n'))),(0,o.kt)("p",null,"Functional, but not really useful. To really get value out of the query builder, we'll first need to define a set of fields for the user to choose from. We can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," array into the query builder through the ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," prop."),(0,o.kt)("p",null,'In the query builder below, click the "+Rule" button and then the fields selector to see the field choices.'),(0,o.kt)(s,{mdxType:"SandpackRQB"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import QueryBuilder from "react-querybuilder";\nimport "react-querybuilder/dist/query-builder.scss";\n\nconst fields: Field[] = [\n  { name: "firstName", label: "First Name" },\n  { name: "lastName", label: "Last Name" },\n];\n\nexport default () => <QueryBuilder fields={fields} />;\n'))),(0,o.kt)("p",null,"Much more useful, but you probably want to monitor and control what users do with the query builder. Let's set up a state variable using the React Hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useState"),". This will store our query object and allow us to pass it on to other components, event handlers, etc."),(0,o.kt)("p",null,"The state variable ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," will be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," prop, and the setter method ",(0,o.kt)("inlineCode",{parentName:"p"},"setQuery")," will be used in the ",(0,o.kt)("inlineCode",{parentName:"p"},"onQueryChange")," callback. Let's also seed the query object with a couple of rules, making sure that the ",(0,o.kt)("inlineCode",{parentName:"p"},"field")," property of each rule matches the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property of one of our fields."),(0,o.kt)(s,{mdxType:"SandpackRQB"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\nimport QueryBuilder, { Field, RuleGroupType } from "react-querybuilder";\nimport "react-querybuilder/dist/query-builder.scss";\n\nconst fields: Field[] = [\n  { name: "firstName", label: "First Name" },\n  { name: "lastName", label: "Last Name" },\n];\n\nexport default () => {\n  const [query, setQuery] = useState<RuleGroupType>({\n    combinator: "and",\n    rules: [\n      { field: "firstName", operator: "=", value: "Steve" },\n      { field: "lastName", operator: "=", value: "Vai" },\n    ],\n  });\n\n  return (\n    <QueryBuilder\n      fields={fields}\n      query={query}\n      onQueryChange={(q) => setQuery(q)}\n    />\n  );\n};\n'))),(0,o.kt)("h2",{id:"onward-and-upward"},"Onward and upward!"),(0,o.kt)("p",null,"To discover all the options of React Query Builder, check out the ",(0,o.kt)("a",{parentName:"p",href:"./api/querybuilder"},"API documentation"),". To play around with various configurations, check out the ",(0,o.kt)("a",{parentName:"p",href:"https://react-querybuilder.github.io/react-querybuilder/"},'"kitchen sink" demo'),"."),(0,o.kt)("h2",{id:"training"},"Training"),(0,o.kt)("p",null,"For an extended tutorial on configuration and customization of ",(0,o.kt)("inlineCode",{parentName:"p"},"react-querybuilder"),", including information about integrating it with a backend API and advanced reporting components (grids, maps, charts, etc.), check out the course ",(0,o.kt)("a",{parentName:"p",href:"https://www.newline.co/courses/building-advanced-admin-reporting-in-react"},"Building Advanced Admin Reporting in React"),", which is taught by one of this library's maintainers, over at ",(0,o.kt)("a",{parentName:"p",href:"https://www.newline.co/"},"newline"),"."))}b.isMDXComponent=!0}}]);